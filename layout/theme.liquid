<!doctype html>
<html class="no-js" lang="{{ request.locale.iso_code }}">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="theme-color" content="#ff6600">
    <link rel="preconnect" href="https://cdn.shopify.com" crossorigin>
    {%- unless settings.type_header_font.system? and settings.type_body_font.system? -%}
      <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>
    {%- endunless -%}

    {%- if settings.favicon != blank -%}
      <link rel="icon" type="image/png" href="{{ settings.favicon | image_url: width: 32, height: 32 }}">
    {%- endif -%}

    {%- comment -%} CENTRALIZED SEO {%- endcomment -%}
    {% render 'seo-head' %}

    {%- comment -%} CRITICAL CSS (inline) â€” keep before content_for_header {%- endcomment -%}
    <style>{% render 'critical-css' %}</style>

    {{ content_for_header }}

    {%- comment %} Google Fonts {%- endcomment %}
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">

    {%- comment %} Main CSS {%- endcomment %}
    {{ 'base.css' | asset_url | stylesheet_tag }}

    {%- comment %} WTF ENV + Config bootstrap (inline so later scripts can read immediately) {%- endcomment %}
    <script>
      (function() {
        const storeHours = {% if shop.metafields.wtf.hours.value %}{{ shop.metafields.wtf.hours.value }}{% else %}null{% endif %};
        const storeAddress = {% if shop.metafields.wtf.address.value %}{{ shop.metafields.wtf.address.value }}{% else %}null{% endif %};
        const integrationEndpoints = {% if shop.metafields.wtf.integration_endpoints.value %}{{ shop.metafields.wtf.integration_endpoints.value }}{% else %}null{% endif %};
        const lightspeedVariantMap = {% if shop.metafields.wtf.lightspeed_variant_map.value %}{{ shop.metafields.wtf.lightspeed_variant_map.value }}{% else %}{}{% endif %};
        const metafieldPhone = {% if shop.metafields.wtf.phone %}{{ shop.metafields.wtf.phone | json }}{% else %}null{% endif %};
        const metafieldEmail = {% if shop.metafields.wtf.email %}{{ shop.metafields.wtf.email | json }}{% else %}null{% endif %};
        const metafieldTimezone = {% if shop.metafields.wtf.timezone %}{{ shop.metafields.wtf.timezone | json }}{% else %}null{% endif %};
        const proxyBaseSetting = {{ settings.integration_proxy_base_path | default: '/apps/wtf' | json }};
        const adminProxyPath = {{ settings.shopify_admin_proxy_path | default: '/apps/wtf/shopify-admin' | json }};
        const normalizedProxyBase = (proxyBaseSetting || '/apps/wtf').replace(/\/$/, '');
        const lightspeedBase = integrationEndpoints?.lightspeed?.base || `${normalizedProxyBase}/lightspeed`;
        const twoAcceptBase = integrationEndpoints?.twoaccept?.base || `${normalizedProxyBase}/2accept`;

        window.WTF_ENV = {
          shopDomain: {{ shop.permanent_domain | json }},
          cartToken: {{ cart.token | json }},
          customerId: {% if customer %}{{ customer.id | json }}{% else %}null{% endif %},
          customerEmail: {% if customer %}{{ customer.email | json }}{% else %}null{% endif %},
          currency: {{ cart.currency.iso_code | default: shop.currency | json }},
          locale: {{ request.locale.iso_code | json }},
          routes: {
            cart_add_url: {{ routes.cart_add_url | json }},
            cart_change_url: {{ routes.cart_change_url | json }},
            cart_update_url: {{ routes.cart_update_url | json }},
            cart_url: {{ routes.cart_url | json }},
            predictive_search_url: {{ routes.predictive_search_url | json }},
            root_url: {{ routes.root_url | json }}
          }
        };

        const resolvedAddress = storeAddress || {
          line1: {{ settings.store_address_1 | json }},
          line2: {{ settings.store_address_2 | json }},
          city: {{ settings.store_city | json }},
          region: {{ settings.store_state | json }},
          postalCode: {{ settings.store_zip | json }},
          country: 'US'
        };

        const resolvedHours = storeHours || {
          monday: { open: '08:00', close: '22:00' },
          tuesday: { open: '08:00', close: '22:00' },
          wednesday: { open: '08:00', close: '22:00' },
          thursday: { open: '08:00', close: '22:00' },
          friday: { open: '08:00', close: '23:00' },
          saturday: { open: '08:00', close: '23:00' },
          sunday: { open: '10:00', close: '22:00' }
        };

        const fallbackPhone = {{ settings.store_phone | default: shop.phone | json }};
        const fallbackEmail = {{ settings.store_email | default: shop.customer_email | default: shop.email | json }};
        const lightspeedEnabled = {{ settings.lightspeed_enable_sync | json }};
        const lightspeedSyncInterval = {{ settings.lightspeed_sync_interval | default: 30 | times: 1000 }};
        const twoAcceptEnabled = {{ settings.twoaccept_public_key != blank | json }};

        window.WTFConfig = {
          store: {
            name: {{ shop.name | json }},
            phone: metafieldPhone || fallbackPhone,
            email: metafieldEmail || fallbackEmail,
            address: resolvedAddress,
            hours: resolvedHours,
            timezone: metafieldTimezone || 'America/New_York'
          },
          integrations: {
            shopify: {
              enabled: true,
              domain: {{ shop.permanent_domain | json }},
              locationId: null,
              endpoints: { adminProxy: adminProxyPath }
            },
            lightspeed: {
              enabled: lightspeedEnabled,
              accountId: {{ settings.lightspeed_account_id | json }},
              syncInterval: lightspeedSyncInterval,
              variantMapping: lightspeedVariantMap,
              endpoints: {
                base: lightspeedBase,
                inventory: integrationEndpoints?.lightspeed?.inventory || `${lightspeedBase}/inventory`,
                availability: integrationEndpoints?.lightspeed?.availability || `${lightspeedBase}/availability`,
                reserve: integrationEndpoints?.lightspeed?.reserve || `${lightspeedBase}/reserve`,
                release: integrationEndpoints?.lightspeed?.release || `${lightspeedBase}/release`,
                sync: integrationEndpoints?.lightspeed?.sync || `${lightspeedBase}/sync`,
                orders: integrationEndpoints?.lightspeed?.orders || `${lightspeedBase}/orders`
              }
            },
            twoaccept: {
              enabled: twoAcceptEnabled,
              publicKey: {{ settings.twoaccept_public_key | json }},
              merchantId: {{ settings.twoaccept_merchant_id | json }},
              environment: {{ settings.twoaccept_environment | default: 'production' | json }},
              enableSavedCards: {{ settings.twoaccept_enable_saved_cards | json }},
              enableApplePay: {{ settings.twoaccept_enable_apple_pay | json }},
              enableGooglePay: {{ settings.twoaccept_enable_google_pay | json }},
              endpoints: {
                base: twoAcceptBase,
                paymentMethods: integrationEndpoints?.twoaccept?.paymentMethods || `${twoAcceptBase}/payment-methods`,
                payments: integrationEndpoints?.twoaccept?.payments || `${twoAcceptBase}/payments`,
                orders: integrationEndpoints?.twoaccept?.orders || `${twoAcceptBase}/orders`,
                savedMethods: integrationEndpoints?.twoaccept?.savedMethods || `${twoAcceptBase}/customers`,
                merchantValidation: integrationEndpoints?.twoaccept?.merchantValidation || `${twoAcceptBase}/apple-pay/validate`,
                applePay: integrationEndpoints?.twoaccept?.applePay || `${twoAcceptBase}/apple-pay`
              }
            }
          },
          analytics: {
            google: { measurementId: {{ settings.google_analytics_id | json }}, enabled: {{ settings.google_analytics_id != blank | json }} },
            googleAds: {{ settings.google_ads_id | json }},
            metaPixel: {{ settings.facebook_pixel_id | json }},
            tiktokPixel: {{ settings.tiktok_pixel_id | json }},
            snapchatPixel: {{ settings.snapchat_pixel_id | json }},
            pinterestTag: {{ settings.pinterest_tag_id | json }},
            clarityProjectId: {{ settings.clarity_project_id | json }},
            hotjarSiteId: {{ settings.hotjar_site_id | json }}
          },
          endpoints: { proxyBase: normalizedProxyBase, shopifyAdminProxy: adminProxyPath }
        };

        window.WTF_CONFIG_DATA = window.WTFConfig;
      })();
    </script>

    {%- comment %} MUST load before other scripts (kept synchronous by design) {%- endcomment %}
    <script src="{{ 'wtf-error-prevention.js' | asset_url }}"></script>
    <script src="{{ 'wtf-config.js' | asset_url }}" defer></script>

    {%- if settings.predictive_search_enabled -%}
      <link rel="stylesheet" href="{{ 'component-predictive-search.css' | asset_url }}" media="print" onload="this.media='all'">
      <noscript>{{ 'component-predictive-search.css' | asset_url | stylesheet_tag }}</noscript>
    {%- endif -%}

    <script>document.documentElement.className = document.documentElement.className.replace('no-js', 'js');</script>

    {%- comment -%} Schema.org Structured Data {%- endcomment -%}
    {% render 'schema-breadcrumb' %}
    {% render 'schema-page-article' %}
    {% render 'schema-local-business' %}
    {% render 'schema-product' %}
    {% render 'schema-product-faq' %}
  </head>

  <body class="gradient{% if settings.animations_hover_elements != 'none' %} animate--hover-{{ settings.animations_hover_elements }}{% endif %}">
    {%- comment %} Facebook SDK for Social Graph Integration {%- endcomment -%}
    {%- if settings.facebook_app_id != blank -%}
      <div id="fb-root"></div>
      <script>
        window.fbAsyncInit = function() {
          FB.init({
            appId      : '{{ settings.facebook_app_id }}',
            cookie     : true,
            xfbml      : true,
            version    : 'v18.0'
          });
          FB.AppEvents.logPageView();
          
          // Dispatch custom event when FB SDK is ready
          document.dispatchEvent(new CustomEvent('fb:sdk:ready'));
        };

        (function(d, s, id){
          var js, fjs = d.getElementsByTagName(s)[0];
          if (d.getElementById(id)) {return;}
          js = d.createElement(s); js.id = id;
          js.src = "https://connect.facebook.net/en_US/sdk.js";
          fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));
      </script>
    {%- endif -%}

    <a class="skip-to-content-link button visually-hidden" href="#MainContent">{{ 'accessibility.skip_to_text' | t }}</a>

    <div id="shopify-section-header">{% section 'header' %}</div>

    <main id="MainContent" class="content-for-layout focus-none" role="main" tabindex="-1">
      {{ content_for_layout }}
    </main>

    {%- comment -%}
    Footer is now managed via JSON templates (OS 2.0 best practice)
    See templates/*.json for footer section configuration
    Cache bust: 2025-10-25-13:49:30
    {%- endcomment -%}

    {%- comment %} Cart Drawer {%- endcomment -%}
    {%- render 'wtf-cart-drawer' -%}

    {%- comment %} Modals/overlays {%- endcomment -%}
    <div id="wtf-modal-overlay" class="wtf-modal-overlay" style="display:none;"></div>
    <div id="wtf-loading-overlay" class="wtf-loading-overlay" style="display:none;">
      <div class="wtf-loading-spinner"></div>
    </div>

    {%- comment %} Accessibility announcements {%- endcomment -%}
    <ul hidden>
      <li id="a11y-refresh-page-message">{{ 'accessibility.refresh_page' | t }}</li>
      <li id="a11y-new-window-message">{{ 'accessibility.link_messages.new_window' | t }}</li>
    </ul>

    {%- comment %} Global JS variables for legacy scripts {%- endcomment -%}
    <script>
      window.shopUrl = '{{ request.origin }}';
      window.routes = {
        cart_add_url: '{{ routes.cart_add_url }}',
        cart_change_url: '{{ routes.cart_change_url }}',
        cart_update_url: '{{ routes.cart_update_url }}',
        cart_url: '{{ routes.cart_url }}',
        predictive_search_url: '{{ routes.predictive_search_url }}',
      };
      window.cartStrings = {
        error: `{{ 'sections.cart.cart_error' | t }}`,
        quantityError: `{{ 'sections.cart.cart_quantity_error_html' | t: quantity: '[quantity]' }}`,
      };
      window.variantStrings = {
        addToCart: `{{ 'products.product.add_to_cart' | t }}`,
        soldOut: `{{ 'products.product.sold_out' | t }}`,
        unavailable: `{{ 'products.product.unavailable' | t }}`,
        unavailable_with_option: `{{ 'products.product.value_unavailable' | t: option_value: '[value]' }}`,
      };
      window.accessibilityStrings = {
        imageAvailable: `{{ 'products.product.media.image_available' | t: index: '[index]' }}`,
        shareSuccess: `{{ 'general.share.success_message' | t }}`,
        pauseSlideshow: `{{ 'sections.slideshow.pause_slideshow' | t }}`,
        playSlideshow: `{{ 'sections.slideshow.play_slideshow' | t }}`,
      };
    </script>

    {%- if settings.predictive_search_enabled -%}
      <script src="{{ 'wtf-search.js' | asset_url }}" defer></script>
    {%- endif -%}

    {%- comment %} Lightweight lazy loader {%- endcomment -%}
    <script>
      document.addEventListener('DOMContentLoaded', function () {
        if ('IntersectionObserver' in window) {
          const io = new IntersectionObserver((entries, obs) => {
            entries.forEach((entry) => {
              if (!entry.isIntersecting) return;
              const img = entry.target;
              if (img.dataset && img.dataset.src) {
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
              }
              obs.unobserve(img);
            });
          });
          document.querySelectorAll('img[data-src]').forEach((img) => io.observe(img));
        }
      });
    </script>

    {%- if template.name == 'product' and product -%}
      <script>window.WTF_PRODUCT_JSON = {{ product | json }};</script>
    {%- endif -%}

    {%- comment %} Analytics / pixels (kept as your snippet) {%- endcomment -%}
    {%- render 'wtf-analytics' -%}
    
    {%- comment %} Meta Conversions API for enhanced tracking {%- endcomment -%}
    {%- render 'meta-conversions-api' -%}

    {%- comment -%}
      ===========================
      SCRIPT LOAD ORDER (BOTTOM)
      ===========================
      1) Hardening shims
      2) Analytics shim
      3) Integration guards
      4) Dawn foundation (if used)
      5) Cart API âžœ Cart UI âžœ Event bridge âžœ Enhancements
      6) Pricing validation
      7) Integrations (Lightspeed/2Accept/Webhooks)
      8) App/system init + helpers
      9) Dev tools
    {%- endcomment -%}

    {%- comment -%} 1) Hardening shims {%- endcomment -%}
    {{ 'safe-define.js'       | asset_url | script_tag | replace: '<script', '<script defer' }}
    {{ 'postmessage-guard.js' | asset_url | script_tag | replace: '<script', '<script defer' }}

    {%- comment -%} 2) Analytics no-op shim (prevents missing method crashes) {%- endcomment -%}
    {{ 'wtf-analytics-shim.js' | asset_url | script_tag | replace: '<script', '<script defer' }}

    {%- comment -%} 3) Integration guards {%- endcomment -%}
    {{ 'analytics-guard.js'  | asset_url | script_tag | replace: '<script', '<script defer' }}
    {{ 'lightspeed-guard.js' | asset_url | script_tag | replace: '<script', '<script defer' }}

    {%- comment -%} 4) Dawn foundation (only what you actually use) {%- endcomment -%}
    <script src="{{ 'constants.js'      | asset_url }}" defer></script>
    <script src="{{ 'pubsub.js'         | asset_url }}" defer></script>
    <script src="{{ 'fetch-config.js'   | asset_url }}" defer></script>
    <script src="{{ 'product-form.js' | asset_url }}" defer></script>

    {%- comment -%} 5) Cart stack: API â†’ UI â†’ bridge â†’ enhancements {%- endcomment -%}
    {{ 'wtf-cart-api.js' | asset_url | script_tag | replace: '<script', '<script defer' }}
    {{ 'wtf-cart-ui.js'  | asset_url | script_tag | replace: '<script', '<script defer' }}
    <script src="{{ 'wtf-cart-event-bridge.js' | asset_url }}" defer></script>
    <script src="{{ 'wtf-variants.js'           | asset_url }}" defer></script>
    <script src="{{ 'wtf-drink-builder-enhanced.js' | asset_url }}" defer></script>
    <script src="{{ 'wtf-upselling.js'          | asset_url }}" defer></script>
    <script src="{{ 'wtf-analytics.js'          | asset_url }}" defer></script>

    {%- comment %} 6) Pricing Validation System {%- endcomment -%}
    {{ 'pricing-validation.js' | asset_url | script_tag | replace: '<script', '<script defer' }}

    {%- comment %} 7) Integrations (conditional) {%- endcomment -%}
    {% if settings.lightspeed_enable_sync and settings.lightspeed_account_id != blank %}
      <script src="{{ 'wtf-lightspeed-integration.js' | asset_url }}" defer></script>
    {% else %}
      <script>console.info('[WTF] Lightspeed integration disabled (not configured)');</script>
    {% endif %}

    {% if settings.twoaccept_public_key != blank %}
      <script src="{{ 'wtf-2accept-integration.js' | asset_url }}" defer></script>
    {% else %}
      <script>console.info('[WTF] 2Accept integration disabled (not configured)');</script>
    {% endif %}

    <script src="{{ 'wtf-webhook-handler.js' | asset_url }}" defer></script>

    {%- comment %} 8) System init & helpers {%- endcomment -%}
    <script>
      // Cart count hydrator is handled by wtf-cart-ui.js; no duplicate listeners here.
      document.addEventListener('DOMContentLoaded', function () {
        if (window.WTFConfig) {
          console.log('WTF System initialized with configuration:', window.WTFConfig.getStoreInfo?.() || window.WTFConfig);

          const validation = window.WTFConfig.validate?.();
          if (validation && !validation.isValid) console.warn('WTF Configuration issues:', validation.errors);

          document.dispatchEvent(new CustomEvent('wtf:system:ready', {
            detail: {
              config: window.WTFConfig,
              integrations: {
                lightspeed: window.WTFConfig.isIntegrationEnabled?.('lightspeed'),
                twoaccept:  window.WTFConfig.isIntegrationEnabled?.('twoaccept'),
                shopify:    window.WTFConfig.isIntegrationEnabled?.('shopify'),
              },
            },
          }));
        }

        // Cart backup
        try {
          const key = 'wtf-cart-backup';
          document.addEventListener('wtf:cart:update', (e) => localStorage.setItem(key, JSON.stringify(e.detail)));
        } catch {}

        // Age verification trigger for THC pages (modal defined below)
        if (window.WTFConfig?.get?.('customers.enableAgeVerification')) {
          const thcPages = ['/pages/thc-drinks', '/pages/thc-shots'];
          if (thcPages.some((p) => location.pathname.includes(p)) &&
              !sessionStorage.getItem('wtf-age-verified')) {
            setTimeout(() => showAgeVerificationModal(), 1000);
          }
        }
      });

      function showAgeVerificationModal() {
        const modal = document.createElement('div');
        modal.className = 'wtf-age-verification-modal';
        modal.innerHTML = `
          <div class="wtf-age-verification-content">
            <h2>Age Verification Required</h2>
            <p>You must be 21 or older to view THC products.</p>
            <p>Are you 21 years of age or older?</p>
            <div class="wtf-age-verification-buttons">
              <button onclick="verifyAge(true)" class="wtf-btn-yes">Yes, I'm 21+</button>
              <button onclick="verifyAge(false)" class="wtf-btn-no">No, I'm under 21</button>
            </div>
          </div>`;
        Object.assign(modal.style, {
          position:'fixed', top:0, left:0, right:0, bottom:0, background:'rgba(0,0,0,0.9)',
          display:'flex', alignItems:'center', justifyContent:'center', zIndex:10000, color:'#fff', textAlign:'center'
        });
        document.body.appendChild(modal);
      }
      function verifyAge(isOfAge) {
        const modal = document.querySelector('.wtf-age-verification-modal');
        if (isOfAge) { sessionStorage.setItem('wtf-age-verified','true'); modal?.remove(); }
        else { location.href = '/'; }
      }

      // Global error handler
      window.addEventListener('error', function (event) {
        if (window.WTFConfig?.get?.('development.enableConsoleLogging')) {
          console.error('WTF System Error:', event.error);
        }
        if (event.error?.message?.includes('WTF')) {
          console.warn('WTF Integration Error detected:', event.error.message);
        }
      });

      // Optional offline mode
      if ('serviceWorker' in navigator && window.WTFConfig?.get?.('features.enableOfflineMode')) {
        navigator.serviceWorker.register('/sw.js')
          .then((r) => console.log('SW registered:', r))
          .catch((e) => console.log('SW registration failed:', e));
      }
    </script>

    {%- comment %} 9) Development tools (last) {%- endcomment -%}
    {% if settings.enable_debug_mode %}
      <script defer>
        window.WTF_DEBUG = {
          config: () => console.table(window.WTFConfig?.raw || window.WTF_CONFIG_DATA || {}),
          integrations: () => console.log('Integrations:', {
            lightspeed: !!window.WTFLightspeed,
            twoaccept: !!window.WTF2Accept,
            webhooks: !!window.WTFWebhooks,
          }),
          cart: () => fetch('/cart.js?ts=' + Date.now(), { cache: 'no-store' }).then(r=>r.json()).then(console.log),
          clearStorage: () => { localStorage.clear(); sessionStorage.clear(); console.log('Storage cleared'); },
          persistentCart: () => window.debugCart && window.debugCart(),
        };
        console.log('WTF Debug tools available: WTF_DEBUG');
      </script>
      <script src="{{ 'wtf-cart-badge.js' | asset_url }}" defer></script>

    {% endif %}
  </body>
</html>
