{%- comment -%}
  Responsive Image Snippet with Performance Optimization
  
  Purpose: Generate responsive image tags with srcset/sizes for optimal loading
  
  Features:
  - Automatic srcset generation (320w, 640w, 960w, 1280w, 1920w)
  - WebP format with fallback
  - Lazy loading (native loading="lazy")
  - Aspect ratio preservation (prevents CLS)
  - Alt text support
  - Sizes attribute for responsive breakpoints
  
  Usage:
  {% render 'responsive-image', 
    image: product.featured_image,
    alt: product.title,
    sizes: '(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw',
    loading: 'lazy',
    class: 'product-image'
  %}
  
  Parameters:
  - image (required): Shopify image object
  - alt (optional): Alt text for accessibility
  - sizes (optional): Sizes attribute for responsive images
  - loading (optional): 'lazy' or 'eager' (default: 'lazy')
  - class (optional): CSS class name
  - width (optional): Max width for srcset
  - height (optional): Max height for srcset
{%- endcomment -%}

{%- liquid
  # Set defaults
  assign loading_attr = loading | default: 'lazy'
  assign fetchpriority_attr = fetchpriority | default: 'auto'
  assign sizes_attr = sizes | default: '100vw'
  assign alt_text = alt | default: image.alt | default: ''
  assign css_class = class | default: ''
  assign max_width = width | default: 1920
  assign max_height = height | default: nil
  
  # Calculate aspect ratio for CLS prevention
  if image.width and image.height
    assign aspect_ratio = image.height | times: 1.0 | divided_by: image.width
    assign aspect_percent = aspect_ratio | times: 100
  else
    assign aspect_percent = 100
  endif
  
  # Generate srcset widths
  assign widths = '320,640,960,1280,1920' | split: ','
  assign srcset_parts = '' | split: ''
  
  for width_str in widths
    assign width_int = width_str | plus: 0
    if width_int <= max_width
      if max_height
        assign img_url = image | image_url: width: width_int, height: max_height, crop: 'center'
      else
        assign img_url = image | image_url: width: width_int
      endif
      assign srcset_part = img_url | append: ' ' | append: width_str | append: 'w'
      assign srcset_parts = srcset_parts | push: srcset_part
    endif
  endfor
  
  assign srcset_string = srcset_parts | join: ', '
  
  # Fallback src (use largest available or specified max_width)
  if max_height
    assign fallback_src = image | image_url: width: max_width, height: max_height, crop: 'center'
  else
    assign fallback_src = image | image_url: width: max_width
  endif
-%}

{%- if image -%}
<picture class="responsive-image-wrapper {{ css_class }}">
  {%- comment -%} WebP source for modern browsers {%- endcomment -%}
  <source
    type="image/webp"
    srcset="{{ srcset_string }}"
    sizes="{{ sizes_attr }}"
  >
  
  {%- comment -%} Fallback img tag {%- endcomment -%}
  <img
    src="{{ fallback_src }}"
    srcset="{{ srcset_string }}"
    sizes="{{ sizes_attr }}"
    alt="{{ alt_text | escape }}"
    loading="{{ loading_attr }}"
    decoding="async"
    fetchpriority="{{ fetchpriority_attr }}"
    width="{{ image.width }}"
    height="{{ image.height }}"
    style="aspect-ratio: {{ image.width }} / {{ image.height }}; object-fit: cover;"
    {%- if css_class != '' %} class="{{ css_class }}"{% endif %}
  >
</picture>

{%- comment -%} Inline CSS for aspect ratio wrapper (prevents CLS) {%- endcomment -%}
<style>
  .responsive-image-wrapper {
    display: block;
    position: relative;
    overflow: hidden;
  }
  
  .responsive-image-wrapper img {
    display: block;
    width: 100%;
    height: auto;
  }
</style>
{%- endif -%}
