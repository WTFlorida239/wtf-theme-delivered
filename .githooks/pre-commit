#!/bin/bash

# WTF Theme Pre-commit Hook
# This script runs quality checks before allowing commits

set -e

echo "🔍 Running WTF Theme pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Check if we're in the right directory
if [ ! -f "layout/theme.liquid" ]; then
    print_status $RED "❌ Error: Not in a Shopify theme directory"
    exit 1
fi

# 1. Run theme-check if available
if command -v theme-check >/dev/null 2>&1; then
    print_status $YELLOW "🔍 Running theme-check..."
    if theme-check . --fail-level=error; then
        print_status $GREEN "✅ Theme-check passed"
    else
        print_status $RED "❌ Theme-check failed"
        exit 1
    fi
else
    print_status $YELLOW "⚠️ theme-check not installed, skipping..."
fi

# 2. Validate JSON files
print_status $YELLOW "🔍 Validating JSON files..."
json_error=0

validate_json() {
    local file="$1"
    if [ -f "$file" ]; then
        if ! python3 -m json.tool "$file" > /dev/null 2>&1; then
            print_status $RED "❌ Invalid JSON: $file"
            json_error=1
        fi
    fi
}

# Check key JSON files
validate_json "config/settings_schema.json"
validate_json "config/settings_data.json"

# Check all template JSON files
find templates/ -name "*.json" -type f | while read -r file; do
    validate_json "$file"
done

if [ $json_error -eq 1 ]; then
    print_status $RED "❌ JSON validation failed"
    exit 1
else
    print_status $GREEN "✅ JSON validation passed"
fi

# 3. Check for large files
print_status $YELLOW "🔍 Checking for large files..."
large_files=$(find . -type f -size +1M -not -path "./.git/*" 2>/dev/null || true)
if [ -n "$large_files" ]; then
    print_status $YELLOW "⚠️ Large files found:"
    echo "$large_files"
    print_status $YELLOW "Consider optimizing these files"
fi

# 4. Check for hardcoded secrets
print_status $YELLOW "🔍 Checking for hardcoded secrets..."
if grep -r "shpat_\|sk_\|pk_" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" --exclude="pre-commit" >/dev/null 2>&1; then
    print_status $RED "❌ Potential hardcoded secrets found"
    print_status $RED "Please remove any hardcoded API keys or tokens"
    exit 1
else
    print_status $GREEN "✅ No hardcoded secrets found"
fi

# 5. Check for console.log statements
print_status $YELLOW "🔍 Checking for console.log statements..."
if find assets/ -name "*.js" -exec grep -l "console\.log" {} \; 2>/dev/null | grep -q .; then
    print_status $YELLOW "⚠️ console.log statements found in JavaScript files"
    print_status $YELLOW "Consider removing them for production"
fi

# 6. Check for TODO/FIXME comments
print_status $YELLOW "🔍 Checking for TODO/FIXME comments..."
todo_count=$(grep -r "TODO\|FIXME" . --exclude-dir=.git --exclude="pre-commit" 2>/dev/null | wc -l || echo 0)
if [ "$todo_count" -gt 0 ]; then
    print_status $YELLOW "⚠️ Found $todo_count TODO/FIXME comments"
    print_status $YELLOW "Consider addressing them before release"
fi

# 7. Check file permissions
print_status $YELLOW "🔍 Checking file permissions..."
executable_files=$(find . -type f -perm /111 -not -path "./.git/*" -not -name "*.sh" -not -name "pre-commit" 2>/dev/null || true)
if [ -n "$executable_files" ]; then
    print_status $YELLOW "⚠️ Unexpected executable files found:"
    echo "$executable_files"
fi

# 8. Run custom scripts if they exist
if [ -f "scripts/order-readiness-check.js" ]; then
    print_status $YELLOW "🔍 Running order readiness check..."
    if node scripts/order-readiness-check.js; then
        print_status $GREEN "✅ Order readiness check passed"
    else
        print_status $RED "❌ Order readiness check failed"
        exit 1
    fi
fi

# 9. Check for required theme files
print_status $YELLOW "🔍 Checking for required theme files..."
required_files=(
    "layout/theme.liquid"
    "config/settings_schema.json"
    "sections/header.liquid"
    "templates/index.json"
    "templates/product.json"
    "templates/cart.liquid"
)

missing_files=0
for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        print_status $RED "❌ Missing required file: $file"
        missing_files=1
    fi
done

if [ $missing_files -eq 1 ]; then
    print_status $RED "❌ Required files missing"
    exit 1
fi

# 10. Final summary
print_status $GREEN "✅ All pre-commit checks passed!"
print_status $GREEN "🚀 Ready to commit"

exit 0
