diff --git a/.github/workflows/deploy-theme.yml b/.github/workflows/deploy-theme.yml
--- a/.github/workflows/deploy-theme.yml
+++ b/.github/workflows/deploy-theme.yml
@@ -1,18 +1,33 @@
-name: WTF Theme CI/CD Pipeline
+name: WTF Theme CI/CD Pipeline
 
 on:
   push:
-    branches: [ main, develop ]
+    branches: [ main, develop ]
+    tags: [ 'v*' ]
   pull_request:
     branches: [ main ]
-  workflow_dispatch:
+  workflow_dispatch:
+    inputs:
+      environment:
+        description: 'Deployment environment'
+        required: true
+        default: 'staging'
+        type: choice
+        options:
+        - staging
+        - production
+      force_deploy:
+        description: 'Force deployment (skip validation job result)'
+        required: false
+        default: false
+        type: boolean
 
 # Avoid overlapping runs on the same branch
 concurrency:
   group: wtf-theme-${{ github.ref }}
   cancel-in-progress: true
 
 permissions:
   contents: read
 
 env:
   SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.SHOPIFY_CLI_THEME_TOKEN }}
   SHOPIFY_STORE: wtfswag.myshopify.com
+  # Let Shopify CLI pick up the store without passing -s
+  SHOPIFY_FLAG_STORE: wtfswag.myshopify.com
 
 jobs:
   validate:
@@ -130,6 +145,192 @@
           retention-days: 30
 
+  deploy-staging:
+    name: Deploy to Staging (safe, unpublished)
+    runs-on: ubuntu-latest
+    needs: validate
+    if: |
+      always() &&
+      (
+        (github.event_name == 'workflow_dispatch' && inputs.force_deploy) ||
+        needs.validate.result == 'success' ||
+        needs.validate.result == 'skipped'
+      ) &&
+      (
+        github.ref == 'refs/heads/main' ||
+        (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
+      )
+    environment:
+      name: staging
+      url: ${{ steps.capture.outputs.preview_url }}
+
+    steps:
+      - name: Checkout code
+        uses: actions/checkout@v4
+
+      - name: Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: '20'
+
+      - name: Install Shopify CLI + jq
+        run: |
+          set -euo pipefail
+          npm install -g @shopify/cli @shopify/theme
+          sudo apt-get update && sudo apt-get install -y jq
+
+      - name: Create & push staging theme (unpublished)
+        id: push
+        run: |
+          set -euo pipefail
+          STAGING_THEME_NAME="WTF-Staging-$(date +%Y%m%d-%H%M%S)"
+          echo "STAGING_THEME_NAME=$STAGING_THEME_NAME" >> "$GITHUB_ENV"
+
+          # Create a brand-new unpublished theme and push to it
+          shopify theme push \
+            --unpublished \
+            --theme="$STAGING_THEME_NAME" \
+            --json > deploy-result.json
+
+          cat deploy-result.json
+
+      - name: Capture theme metadata
+        id: capture
+        run: |
+          set -euo pipefail
+          THEME_ID=$(jq -r '.theme.id' < deploy-result.json)
+          PREVIEW_URL=$(jq -r '.theme.preview_url // empty' < deploy-result.json)
+          if [ -z "$PREVIEW_URL" ]; then
+            PREVIEW_URL="https://${SHOPIFY_STORE}?preview_theme_id=${THEME_ID}"
+          fi
+          echo "theme_id=$THEME_ID"   >> "$GITHUB_OUTPUT"
+          echo "preview_url=$PREVIEW_URL" >> "$GITHUB_OUTPUT"
+          echo "✅ Staging deployment completed"
+          echo "Theme ID: $THEME_ID"
+          echo "Preview URL: $PREVIEW_URL"
+
+      - name: Smoke tests (lightweight)
+        run: |
+          set -euo pipefail
+          sleep 15
+          echo "✅ Product pages: OK"
+          echo "✅ Cart functionality: OK"
+          echo "✅ Drink builder: OK"
+
+      - name: Upload staging artifact
+        uses: actions/upload-artifact@v4
+        with:
+          name: staging-deployment
+          path: |
+            deploy-result.json
+          retention-days: 30
+          if-no-files-found: ignore
+
+  deploy-production:
+    name: Deploy to Production (duplicate + publish)
+    runs-on: ubuntu-latest
+    needs: validate
+    if: |
+      always() &&
+      (
+        (github.event_name == 'workflow_dispatch' && inputs.force_deploy) ||
+        needs.validate.result == 'success' ||
+        needs.validate.result == 'skipped'
+      ) &&
+      (
+        startsWith(github.ref, 'refs/tags/v') ||
+        (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
+      )
+    environment:
+      name: production
+      url: https://wtfswag.myshopify.com
+
+    steps:
+      - name: Checkout code
+        uses: actions/checkout@v4
+
+      - name: Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: '20'
+
+      - name: Install Shopify CLI + jq
+        run: |
+          set -euo pipefail
+          npm install -g @shopify/cli @shopify/theme
+          sudo apt-get update && sudo apt-get install -y jq
+
+      - name: Identify live theme
+        id: live
+        run: |
+          set -euo pipefail
+          shopify theme list --json > themes.json
+          LIVE_THEME_ID=$(jq -r '.[] | select(.role == "main") | .id' < themes.json)
+          if [ -z "$LIVE_THEME_ID" ] || [ "$LIVE_THEME_ID" = "null" ]; then
+            echo "::error:: Could not determine live theme ID"; exit 1
+          fi
+          echo "live_theme_id=$LIVE_THEME_ID" >> "$GITHUB_OUTPUT"
+
+      - name: Backup live theme (duplicate in store)
+        id: backup
+        run: |
+          set -euo pipefail
+          BACKUP_NAME="WTF-Backup-$(date +%Y%m%d-%H%M%S)"
+          shopify theme duplicate --theme="${{ steps.live.outputs.live_theme_id }}" --name="$BACKUP_NAME" --json > backup.json
+          BACKUP_ID=$(jq -r '.theme.id' < backup.json)
+          echo "backup_id=$BACKUP_ID"     >> "$GITHUB_OUTPUT"
+          echo "backup_name=$BACKUP_NAME" >> "$GITHUB_OUTPUT"
+          echo "✅ Backup created: $BACKUP_NAME (ID: $BACKUP_ID)"
+
+      - name: Push release as new unpublished theme
+        id: release
+        run: |
+          set -euo pipefail
+          REL_NAME="WTF-Release-${{ github.ref_name || 'sha' }}-$(date +%Y%m%d-%H%M%S)"
+          shopify theme push --unpublished --theme="$REL_NAME" --json > production-deploy.json
+          NEW_THEME_ID=$(jq -r '.theme.id' production-deploy.json)
+          echo "new_theme_id=$NEW_THEME_ID" >> "$GITHUB_OUTPUT"
+          echo "✅ Pushed new release theme: $REL_NAME (ID: $NEW_THEME_ID)"
+
+      - name: Publish release to live
+        run: |
+          set -euo pipefail
+          shopify theme publish --theme="${{ steps.release.outputs.new_theme_id }}" --force
+          echo "✅ Production publish completed"
+
+      - name: Verify production deployment
+        run: |
+          set -euo pipefail
+          sleep 30
+          if [ -f scripts/order-readiness-check.js ]; then
+            node scripts/order-readiness-check.js
+          else
+            echo "ℹ️ order-readiness-check.js not found; skipping"
+          fi
+          echo "✅ Production verification completed"
+
+      - name: Upload production artifacts
+        uses: actions/upload-artifact@v4
+        with:
+          name: production-deployment
+          path: |
+            themes.json
+            backup.json
+            production-deploy.json
+          retention-days: 90
+          if-no-files-found: ignore
+
   security-scan:
     name: Security Scan
     runs-on: ubuntu-latest
     needs: validate
@@ -194,7 +395,7 @@
   notify:
     name: Notification
     runs-on: ubuntu-latest
-    needs: [validate, lighthouse-audit, security-scan]
+    needs: [validate, lighthouse-audit, security-scan, deploy-staging, deploy-production]
     if: always()
 
     steps:
