<style>
      /* ——— Base / Layout ——— */
      * { box-sizing: border-box; margin: 0; padding: 0; }
      body { 
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); 
        line-height: 1.6; 
        color:#333; 
        min-height: 100vh;
      }
      .header { 
        background: linear-gradient(135deg, #ff6600 0%, #e55a00 100%); 
        color: #fff; 
        padding: 20px 0; 
        text-align: center; 
        font-size: 28px; 
        font-weight: 800; 
        box-shadow: 0 4px 20px rgba(255,102,0,0.3);
      }
      .container { max-width: 1200px; margin: 0 auto; padding: 30px 20px; }
      .back-link { 
        display: inline-block; 
        color: #ff6600; 
        text-decoration: none; 
        font-weight: 700; 
        font-size: 16px; 
        margin-bottom: 30px; 
        padding: 12px 20px; 
        border: 3px solid #ff6600; 
        border-radius: 25px; 
        transition: all .3s ease; 
        background: #fff;
        box-shadow: 0 4px 15px rgba(255,102,0,0.2);
      }
      .back-link:hover { 
        background: #ff6600; 
        color: #fff; 
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(255,102,0,0.4);
      }
      .product-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 50px; align-items: start; }
      .product-image { 
        width: 100%; 
        max-width: 400px; 
        border-radius: 20px; 
        box-shadow: 0 8px 30px rgba(0,0,0,.15); 
        height:auto; 
        transition: transform .3s ease;
      }
      .product-image:hover { transform: scale(1.02); }
      .product-details { 
        background: #fff; 
        padding: 40px; 
        border-radius: 20px; 
        box-shadow: 0 8px 30px rgba(0,0,0,.1); 
        border: 1px solid #f0f0f0;
      }
      .product-title { 
        font-size: 36px; 
        margin-bottom: 15px; 
        font-weight: 900; 
        background: linear-gradient(135deg, #ff6600 0%, #e55a00 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }
      .product-price { 
        font-size: 28px; 
        color: #ff6600; 
        font-weight: 800; 
        margin-bottom: 20px; 
        text-shadow: 0 2px 4px rgba(255,102,0,0.2);
      }
      .product-description { color: #666; margin-bottom: 35px; font-size: 17px; line-height: 1.7; }
      .selection-section { 
        margin: 35px 0; 
        border-bottom: 2px solid #f0f0f0; 
        padding-bottom: 25px; 
        transition: all .3s ease;
      }
      .selection-section:last-child { border-bottom: none; }
      .section-title { 
        font-size: 20px; 
        font-weight: 800; 
        margin-bottom: 18px; 
        color: #333;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
      }
      .info-box { 
        background: linear-gradient(135deg, #e7f3ff 0%, #d1ecf1 100%); 
        padding: 18px; 
        border-radius: 12px; 
        margin-bottom: 18px; 
        font-size: 14px; 
        border: 1px solid #bee5eb;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      }

      /* ——— Options ——— */
      .option-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(160px,1fr)); gap: 12px; }
      .option-button { 
        padding: 18px; 
        border: 3px solid #ddd; 
        border-radius: 12px; 
        text-align: center; 
        background: #fff; 
        cursor: pointer; 
        transition: all .2s ease; 
        color:#333; 
        font-size: 14px; 
        min-height: 70px; 
        display:flex; 
        align-items:center; 
        justify-content:center; 
        flex-direction:column;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      }
      .option-button:hover { 
        border-color: #ff6600; 
        transform: translateY(-3px); 
        box-shadow: 0 6px 20px rgba(255,102,0,0.25); 
      }
      .option-button.selected { 
        background: linear-gradient(135deg, #ff6600 0%, #e55a00 100%); 
        color: #fff; 
        border-color: #ff6600; 
        font-weight: 800; 
        box-shadow: 0 6px 20px rgba(255,102,0,0.4);
      }

      /* Flavor buttons */
      .flavor-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(140px,1fr)); gap: 10px; }
      .flavor-button { 
        padding: 15px 10px; 
        border: 2px solid #ddd; 
        border-radius: 10px; 
        text-align: center; 
        background: #fff; 
        cursor: pointer; 
        transition: all .2s ease; 
        font-size: 13px; 
        color: #333; 
        min-height: 55px; 
        display: flex; 
        align-items: center; 
        justify-content: center;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
      }
      .flavor-button:hover { 
        border-color: #28a745; 
        transform: translateY(-2px); 
        box-shadow: 0 4px 12px rgba(40,167,69,0.2);
      }
      .flavor-button.selected { 
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%); 
        color: #fff; 
        border-color: #28a745; 
        font-weight: 600; 
        box-shadow: 0 4px 12px rgba(40,167,69,0.3);
      }

      /* ——— Quantity ——— */
      .quantity-controls { display:flex; align-items:center; gap: 20px; }
      .qty-btn { 
        width: 45px; 
        height: 45px; 
        border: 3px solid #ff6600; 
        background:#fff; 
        color:#ff6600; 
        border-radius: 50%; 
        cursor: pointer; 
        font-size: 20px; 
        font-weight: 700; 
        transition: all .2s ease;
        box-shadow: 0 2px 8px rgba(255,102,0,0.2);
      }
      .qty-btn:hover { 
        background:#ff6600; 
        color:#fff; 
        transform: scale(1.1);
        box-shadow: 0 4px 12px rgba(255,102,0,0.4);
      }
      .qty-input { 
        width: 90px; 
        text-align:center; 
        padding:12px; 
        border:3px solid #ddd; 
        border-radius:8px; 
        font-size:16px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
      }

      /* ——— Comments ——— */
      .comments-textarea { 
        width: 100%; 
        padding: 15px; 
        border: 3px solid #ddd; 
        border-radius: 8px; 
        resize: vertical; 
        font-size: 14px; 
        line-height: 1.5;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
      }
      .comments-textarea:focus { 
        border-color: #ff6600; 
        outline: none; 
        box-shadow: 0 4px 12px rgba(255,102,0,0.2);
      }

      /* ——— CTA / Status ——— */
      .add-to-cart-btn { 
        width: 100%; 
        padding: 20px; 
        background: linear-gradient(135deg, #ff6600 0%, #e55a00 100%); 
        color: #fff; 
        border: none; 
        border-radius: 12px; 
        font-size: 18px; 
        font-weight: 800; 
        cursor: pointer; 
        margin-top: 25px; 
        transition: all .2s ease;
        box-shadow: 0 4px 15px rgba(255,102,0,0.3);
      }
      .add-to-cart-btn:hover { 
        background: linear-gradient(135deg, #e55a00 0%, #d44500 100%); 
        transform: translateY(-2px); 
        box-shadow: 0 6px 20px rgba(255,102,0,0.4); 
      }
      .add-to-cart-btn:disabled { 
        background:#ccc; 
        cursor:not-allowed; 
        transform:none; 
        box-shadow:none; 
      }
      .success-message { 
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%); 
        color: #155724; 
        padding: 18px; 
        border-radius: 10px; 
        margin: 18px 0; 
        border: 1px solid #c3e6cb; 
        display: none; 
        font-size: 14px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      }
      .success-message.show { display: block; }
      .cart-status { 
        position: fixed; 
        top: 20px; 
        right: 20px; 
        background: linear-gradient(135deg, #ff6600 0%, #e55a00 100%); 
        color:#fff; 
        padding:12px 18px; 
        border-radius:25px; 
        font-weight:700; 
        z-index:1000; 
        box-shadow:0 4px 15px rgba(255,102,0,0.4);
      }

      /* ——— Motion preferences ——— */
      @media (prefers-reduced-motion: reduce){
        .back-link, .option-button, .qty-btn, .add-to-cart-btn { transition: none !important; }
      }

      /* ——— Responsive ——— */
      @media (max-width: 768px){
        .product-grid { grid-template-columns: 1fr; gap:30px; }
        .option-grid { grid-template-columns: repeat(2,1fr); }
        .flavor-grid { grid-template-columns: repeat(2,1fr); }
        .product-details { padding: 25px; }
        .container { padding: 20px 15px; }
      }

      /* Focus visible outline */
      :where(.back-link, .option-button, .qty-btn, .add-to-cart-btn):focus-visible { 
        outline: 3px solid #1a73e8; 
        outline-offset: 2px; 
        border-radius: 8px; 
      }
      .sr-only { 
        position:absolute!important; 
        width:1px; 
        height:1px; 
        overflow:hidden; 
        clip:rect(1px,1px,1px,1px); 
        white-space:nowrap; 
      }
    </style>

    {% assign thc_variant_id = page.metafields.custom.thc_drinks_variant_id | default: settings.thc_drinks_variant_id | default: 0 %}
    {% assign thc_variant_map = page.metafields.custom.thc_drinks_variant_map %}
    {% if thc_variant_map == blank %}
      {% assign thc_variant_map = settings.thc_drinks_variant_map %}
    {% endif %}
    {% assign thc_product_handle = page.metafields.custom.thc_drinks_product_handle | default: settings.thc_drinks_product_handle %}
    <script>
      window.THC_DRINKS_VARIANT_ID = {{ thc_variant_id | json }};
      window.THC_DRINKS_CONFIG = {
        productHandle: {{ thc_product_handle | json }},
        variantMap: {{ thc_variant_map | json }},
        fallbackVariantId: {{ thc_variant_id | json }}
      };
    </script>

<div class="header">WTF | Welcome To Florida</div>
    <div class="cart-status" id="cart-status" aria-live="polite">
      Cart: <span id="cart-count">{{ cart.item_count }}</span> items
    </div>

    <div class="container">
      <a href="/" class="back-link">← Back to Menu</a>

      <div class="product-grid">
        <div class="product-image-section">
          <img
            src="{{ 'thc_drinks_150x150.png' | asset_url }}"
            alt="THC Drinks"
            class="product-image"
            width="400"
            height="400"
            loading="eager"
            fetchpriority="high"
          >
        </div>

        <div class="product-details">
          <h1 class="product-title">THC Drinks</h1>
          <div class="product-price" id="product-price">$15.00 - Regular • $20.00 - Large • $120.00 - Gallon</div>
          <p class="product-description">
            Premium THC-infused drinks with your choice of size and four delicious flavors. Each drink is carefully crafted for consistent potency and exceptional taste.
          </p>

          <div class="info-box">
            <strong>⚠️ Important:</strong> Must be 21+ to purchase. Please consume responsibly. Effects may take 30-90 minutes to onset.
          </div>

          <!-- Size Selection (Variants) -->
          <div class="selection-section">
            <h3 class="section-title">📏 Choose Your Size</h3>
            <div class="option-grid" id="size-options" role="group" aria-label="Size options">
              <button type="button" class="option-button" data-size="Regular" data-price="15.00">
                <strong>Regular</strong><br>
                <small>$15.00</small>
              </button>
              <button type="button" class="option-button" data-size="Large" data-price="20.00">
                <strong>Large</strong><br>
                <small>$20.00</small>
              </button>
              <button type="button" class="option-button" data-size="Gallon" data-price="120.00">
                <strong>Gallon</strong><br>
                <small>$120.00</small>
              </button>
            </div>
          </div>

          <!-- Flavor Selection -->
          <div class="selection-section">
            <h3 class="section-title">🍹 Choose Your Flavor</h3>
            <div class="info-box">
              All four flavors are available for each size option.
            </div>
            <div class="flavor-grid" id="flavor-options" role="group" aria-label="Flavor options">
              <button type="button" class="flavor-button" data-flavor="Fail Margarita">
                <strong>Fail Margarita</strong>
              </button>
              <button type="button" class="flavor-button" data-flavor="Cherry Vanilla">
                <strong>Cherry Vanilla</strong>
              </button>
              <button type="button" class="flavor-button" data-flavor="Melon Peach Mojito">
                <strong>Melon Peach Mojito</strong>
              </button>
              <button type="button" class="flavor-button" data-flavor="Pomegranate Cherry">
                <strong>Pomegranate Cherry</strong>
              </button>
            </div>
          </div>

          <!-- Comments -->
          <div class="selection-section">
            <h3 class="section-title">💬 Special Requests & Comments</h3>
            <label for="order-comments" class="sr-only">Order comments</label>
            <textarea
              id="order-comments"
              class="comments-textarea"
              placeholder="Any special requests or modifications? We'll try to accommodate!"
              rows="3"
            ></textarea>
          </div>

          <!-- Quantity -->
          <div class="selection-section">
            <h3 class="section-title">🔢 Quantity</h3>
            <div class="quantity-controls">
              <button type="button" class="qty-btn" aria-label="Decrease quantity" onclick="changeQuantity(-1)">
                −
              </button>
              <input
                type="number"
                id="quantity"
                value="1"
                min="1"
                max="50"
                class="qty-input"
                inputmode="numeric"
                pattern="[0-9]*"
              >
              <button type="button" class="qty-btn" aria-label="Increase quantity" onclick="changeQuantity(1)">
                +
              </button>
            </div>
          </div>

          <div id="success-message" class="success-message" role="status" aria-live="polite"></div>

          <button type="button" id="add-to-cart-btn" class="add-to-cart-btn" onclick="addToCart()" disabled>
            Select Size & Flavor
          </button>
        </div>
      </div>
    </div>

    <script>
      const moneyFmt = new Intl.NumberFormat(undefined, { style: 'currency', currency: 'USD' });
      const config = window.THC_DRINKS_CONFIG || {};
      const rootUrl = (window.Shopify && window.Shopify.routes && window.Shopify.routes.root) || '/';
      const normalizedRoot = rootUrl.endsWith('/') ? rootUrl : `${rootUrl}/`;
      const fallbackVariantIdRaw = Number(config.fallbackVariantId || window.THC_DRINKS_VARIANT_ID || 0);
      const normalizedVariantMap = parseVariantMap(config.variantMap);
      let selectedSize = null;
      let selectedFlavor = null;
      let selectedVariantId = Number.isInteger(fallbackVariantIdRaw) && fallbackVariantIdRaw > 0 ? fallbackVariantIdRaw : null;
      let currentVariant = null;
      let basePrice = 15.0;
      const variantIndex = new Map();
      const optionIndex = new Map();
      let productData = null;
      let productFetchAttempted = false;
      const sizePrices = {};

      document.addEventListener('DOMContentLoaded', () => {
        hydrateSizePriceMap();
        wireOptionButtons();
        updateCartCount();
        updateUI();

        if (config.productHandle) {
          ensureProductData().then(() => {
            if (selectedVariantId && variantIndex.has(selectedVariantId)) {
              currentVariant = variantIndex.get(selectedVariantId);
              if (currentVariant && typeof currentVariant.price === 'number') {
                basePrice = currentVariant.price / 100;
                updateUI();
              }
            }
          });
        }
      });

      function hydrateSizePriceMap() {
        document.querySelectorAll('#size-options .option-button').forEach((btn) => {
          const size = btn.dataset.size;
          const price = parseFloat(btn.dataset.price || '0');
          if (size && !Number.isNaN(price)) {
            sizePrices[size] = price;
          }
        });
      }

      function parseVariantMap(raw) {
        if (!raw) return {};
        let data = raw;
        if (typeof data === 'string') {
          try {
            data = JSON.parse(data);
          } catch (error) {
            console.warn('THC Drinks: invalid variant map JSON', error);
            data = {};
          }
        }
        if (data == null || typeof data !== 'object' || Array.isArray(data)) return {};
        const map = {};
        Object.keys(data).forEach((key) => {
          const value = Number(data[key]);
          if (!Number.isInteger(value) || value <= 0) return;
          map[key] = value;
          map[key.toLowerCase()] = value;
        });
        return map;
      }

      function wireOptionButtons() {
        document.querySelectorAll('#size-options .option-button').forEach((btn) => {
          btn.addEventListener('click', () => handleSizeClick(btn));
        });

        document.querySelectorAll('.flavor-button').forEach((btn) => {
          btn.addEventListener('click', () => handleFlavorClick(btn));
        });
      }

      async function handleSizeClick(btn) {
        document.querySelectorAll('#size-options .option-button').forEach((b) => b.classList.remove('selected'));
        btn.classList.add('selected');
        selectedSize = btn.dataset.size;

        try {
          const variant = await resolveVariantForSize(selectedSize);
          if (variant && typeof variant.price === 'number') {
            basePrice = variant.price / 100;
          } else if (sizePrices[selectedSize]) {
            basePrice = sizePrices[selectedSize];
          }

          currentVariant = variant || null;
          selectedVariantId = variant ? Number(variant.id) : null;

          if (selectedVariantId && Number.isInteger(selectedVariantId) && selectedVariantId > 0) {
            btn.dataset.variantId = String(selectedVariantId);
          } else {
            btn.dataset.variantId = '';
          }
        } catch (error) {
          console.warn('THC Drinks: failed to resolve variant for size', error);
          currentVariant = null;
          selectedVariantId = null;
        }

        updateUI();
      }

      function handleFlavorClick(btn) {
        document.querySelectorAll('.flavor-button').forEach((b) => b.classList.remove('selected'));
        btn.classList.add('selected');
        selectedFlavor = btn.dataset.flavor;
        updateUI();
      }

      function computeDisplayPrice() {
        if (currentVariant && typeof currentVariant.price === 'number') {
          return currentVariant.price / 100;
        }
        if (selectedSize && sizePrices[selectedSize]) {
          return sizePrices[selectedSize];
        }
        if (selectedVariantId && variantIndex.has(selectedVariantId)) {
          const variant = variantIndex.get(selectedVariantId);
          if (variant && typeof variant.price === 'number') {
            return variant.price / 100;
          }
        }
        return basePrice;
      }

      function updateUI() {
        const priceEl = document.getElementById('product-price');
        const btnEl = document.getElementById('add-to-cart-btn');
        const displayPrice = computeDisplayPrice();

        priceEl.textContent = moneyFmt.format(displayPrice);

        const variantValid = Number.isInteger(selectedVariantId) && selectedVariantId > 0;
        const canAdd = Boolean(selectedSize && selectedFlavor && variantValid);
        btnEl.disabled = !canAdd;

        if (canAdd) {
          btnEl.textContent = `Add to Cart - ${moneyFmt.format(displayPrice)}`;
        } else if (selectedSize && !variantValid) {
          btnEl.textContent = 'Size unavailable. Choose another option';
        } else {
          const missing = [];
          if (!selectedSize) missing.push('Size');
          if (!selectedFlavor) missing.push('Flavor');
          btnEl.textContent = `Select ${missing.join(' & ')}`;
        }
      }

      function changeQuantity(delta) {
        const input = document.getElementById('quantity');
        const current = parseInt(input.value, 10) || 1;
        const newVal = Math.max(1, Math.min(50, current + delta));
        input.value = newVal;
        updateUI();
      }

      async function updateCartCount() {
        const counter = document.getElementById('cart-count');
        if (!counter || !window.WTFCartAPI) return;
        try {
          const cart = await window.WTFCartAPI.getCart();
          counter.textContent = cart.item_count;
        } catch (error) {
          console.warn('Cart count update failed:', error);
        }
      }

      async function addToCart() {
        const btn = document.getElementById('add-to-cart-btn');
        const original = btn.textContent;
        btn.textContent = 'Adding...';
        btn.disabled = true;

        const quantity = Math.max(1, parseInt(document.getElementById('quantity').value, 10) || 1);
        const comments = document.getElementById('order-comments').value.trim();
        const variantId = Number(selectedVariantId);

        if (!Number.isInteger(variantId) || variantId <= 0) {
          alert('Please choose a size before adding to cart.');
          btn.textContent = original;
          btn.disabled = false;
          return;
        }

        const properties = {
          Size: selectedSize,
          Flavor: selectedFlavor
        };
        if (comments) {
          properties.Comments = comments;
        }

        try {
          await window.WTFCartAPI.addToCart({
            id: variantId,
            quantity,
            properties
          });

          await updateCartCount();

          const success = document.getElementById('success-message');
          const displayPrice = computeDisplayPrice();
          success.innerHTML = `✅ <strong>Added to cart!</strong><br>
             🍹 THC Drink — <strong>${properties.Size}</strong><br>
             🍓 Flavor: ${properties.Flavor}<br>
             🔢 Qty: ${quantity}<br>
             💵 Subtotal: ${moneyFmt.format(displayPrice * quantity)}${properties.Comments ? `<br>💬 ${properties.Comments}` : ''}`;
          success.classList.add('show');
          success.scrollIntoView({ behavior: 'smooth', block: 'center' });

          document.dispatchEvent(new CustomEvent('thc-drinks:added', {
            detail: { variantId, ...properties, quantity }
          }));
        } catch (err) {
          console.error('Add to cart error:', err);
          alert('❌ ' + (err && err.message ? err.message : 'Error adding to cart. Please try again.'));
        } finally {
          setTimeout(() => {
            btn.textContent = original;
            btn.disabled = false;
            const success = document.getElementById('success-message');
            success.classList.remove('show');
          }, 4000);
        }
      }

      async function resolveVariantForSize(size) {
        if (!size) return null;
        const normalizedKey = size.trim().toLowerCase();
        const mappedId = normalizedVariantMap[size] || normalizedVariantMap[normalizedKey];

        if (mappedId) {
          const numericId = Number(mappedId);
          if (Number.isInteger(numericId) && numericId > 0) {
            if (!variantIndex.has(numericId)) {
              await ensureProductData();
            }
            return variantIndex.get(numericId) || { id: numericId };
          }
        }

        await ensureProductData();

        if (optionIndex.has(normalizedKey)) {
          return optionIndex.get(normalizedKey);
        }

        return null;
      }

      async function ensureProductData() {
        if (productData || productFetchAttempted) {
          return productData;
        }

        productFetchAttempted = true;
        const handle = (config.productHandle || '').trim();
        if (!handle) {
          return null;
        }

        const url = `${normalizedRoot}products/${encodeURIComponent(handle)}.js`;

        try {
          const response = await fetch(url, { credentials: 'same-origin' });
          if (!response.ok) {
            throw new Error(`Failed to load product JSON (${response.status})`);
          }

          productData = await response.json();

          if (Array.isArray(productData?.variants)) {
            productData.variants.forEach((variant) => {
              const idNum = Number(variant.id);
              if (Number.isInteger(idNum)) {
                variantIndex.set(idNum, variant);
              }
              if (variant.option1) {
                optionIndex.set(variant.option1.trim().toLowerCase(), variant);
              }
            });
          }
        } catch (error) {
          console.warn('THC Drinks: unable to load product data', error);
          productData = null;
        }

        return productData;
      }
    </script>
