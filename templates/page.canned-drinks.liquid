{%- comment -%}
  Dynamic Canned Drinks Page
  Pulls all products from the 'canned-drinks' collection
  Generates brand buttons and flavor sections dynamically
  Uses real variant IDs for add-to-cart
{%- endcomment -%}

{%- assign canned_collection = collections['canned-drinks'] -%}
{%- assign all_products = canned_collection.products -%}

{%- comment -%} Group products by vendor (brand) {%- endcomment -%}
{%- assign brands = all_products | map: 'vendor' | uniq | sort -%}

<style>
  * { box-sizing: border-box; margin: 0; padding: 0; }
  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f8f9fa; line-height: 1.6; }
  .header { background: #ff6600; color: white; padding: 15px 0; text-align: center; font-size: 24px; font-weight: bold; }
  .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
  .back-link { display: inline-block; color: #ff6600; text-decoration: none; font-weight: bold; font-size: 16px; margin-bottom: 20px; padding: 10px 15px; border: 2px solid #ff6600; border-radius: 5px; transition: all 0.3s ease; }
  .back-link:hover { background: #ff6600; color: white; }
  .product-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 40px; align-items: start; }
  .product-image { width: 100%; max-width: 400px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
  .product-details { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
  .product-title { font-size: 32px; color: #333; margin-bottom: 10px; font-weight: bold; }
  .product-price { font-size: 24px; color: #ff6600; font-weight: bold; margin-bottom: 15px; }
  .price-placeholder { background: #d1ecf1; color: #0c5460; padding: 10px; border-radius: 5px; margin: 10px 0; font-size: 14px; border: 1px solid #bee5eb; }
  .product-description { color: #666; margin-bottom: 30px; line-height: 1.6; font-size: 16px; }
  .selection-section { margin: 30px 0; border-bottom: 1px solid #eee; padding-bottom: 20px; }
  .selection-section:last-child { border-bottom: none; }
  .section-title { font-size: 18px; font-weight: bold; color: #333; margin-bottom: 15px; }
  .brand-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin-bottom: 20px; }
  .brand-button { padding: 15px; border: 3px solid #ddd; border-radius: 8px; text-align: center; background: white; cursor: pointer; transition: all 0.3s ease; color: #333; font-size: 14px; font-family: inherit; min-height: 60px; display: flex; align-items: center; justify-content: center; font-weight: bold; }
  .brand-button:hover { border-color: #ff6600; transform: translateY(-2px); box-shadow: 0 4px 8px rgba(255,102,0,0.2); }
  .brand-button.selected { background: #ff6600; color: white; border-color: #ff6600; }
  .flavor-section { display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 8px; }
  .flavor-section.show { display: block; }
  .flavor-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 8px; }
  .flavor-button { padding: 12px 8px; border: 2px solid #ddd; border-radius: 6px; text-align: center; background: white; cursor: pointer; transition: all 0.3s ease; font-size: 13px; color: #333; font-family: inherit; min-height: 50px; display: flex; align-items: center; justify-content: center; }
  .flavor-button:hover:not(:disabled) { border-color: #28a745; transform: translateY(-1px); }
  .flavor-button.selected { background: #28a745; color: white; border-color: #28a745; font-weight: bold; }
  .flavor-button:disabled { opacity: 0.5; cursor: not-allowed; background: #f8f9fa; }
  .quantity-controls { display: flex; align-items: center; gap: 15px; }
  .qty-btn { width: 40px; height: 40px; border: 2px solid #ff6600; background: white; color: #ff6600; border-radius: 50%; cursor: pointer; font-size: 18px; font-weight: bold; font-family: inherit; transition: all 0.3s ease; }
  .qty-btn:hover { background: #ff6600; color: white; transform: scale(1.1); }
  .qty-input { width: 80px; text-align: center; padding: 10px; border: 2px solid #ddd; border-radius: 5px; font-size: 16px; font-family: inherit; }
  .comments-textarea { width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 5px; resize: vertical; font-family: inherit; font-size: 14px; line-height: 1.4; }
  .comments-textarea:focus { border-color: #ff6600; outline: none; }
  .add-to-cart-btn { width: 100%; padding: 18px; background: #ff6600; color: white; border: none; border-radius: 8px; font-size: 18px; font-weight: bold; cursor: pointer; margin-top: 20px; font-family: inherit; transition: all 0.3s ease; }
  .add-to-cart-btn:hover:not(:disabled) { background: #e55a00; transform: translateY(-2px); box-shadow: 0 4px 12px rgba(255,102,0,0.3); }
  .add-to-cart-btn:disabled { background: #ccc; cursor: not-allowed; transform: none; box-shadow: none; }
  .success-message { background: #d4edda; color: #155724; padding: 15px; border-radius: 5px; margin: 15px 0; border: 1px solid #c3e6cb; display: none; font-size: 14px; line-height: 1.4; }
  .success-message.show { display: block; }
  .cart-status { position: fixed; top: 20px; right: 20px; background: #ff6600; color: white; padding: 10px 15px; border-radius: 25px; font-weight: bold; z-index: 1000; box-shadow: 0 4px 12px rgba(255,102,0,0.3); }
  .info-box { background: #e7f3ff; padding: 15px; border-radius: 8px; margin-bottom: 15px; color: #333; font-size: 14px; line-height: 1.4; }
  @media (max-width: 768px) { 
    .product-grid { grid-template-columns: 1fr; } 
    .brand-grid { grid-template-columns: repeat(2, 1fr); } 
    .flavor-grid { grid-template-columns: repeat(2, 1fr); } 
    .product-details { padding: 20px; } 
  }
</style>

{%- comment -%} Generate dynamic product data for JavaScript {%- endcomment -%}
<script>
  // Dynamic brand prices from real products
  const BRAND_PRICES = {
    {% for brand in brands %}
      {%- assign brand_products = all_products | where: 'vendor', brand -%}
      {%- assign prices = brand_products | map: 'price' | sort -%}
      {%- assign min_price = prices | first -%}
      '{{ brand | escape }}': {{ min_price | money_without_currency }},
    {% endfor %}
  };
  
  // Dynamic product/variant mapping
  const PRODUCT_DATA = {
    {% for brand in brands %}
      '{{ brand | escape }}': {
        {% assign brand_products = all_products | where: 'vendor', brand %}
        {% for product in brand_products %}
          {% assign variants_data = product.variants %}
          {% for variant in variants_data %}
            '{{ variant.title | escape }}': {
              variantId: '{{ variant.id }}',
              price: {{ variant.price | money_without_currency }},
              available: {{ variant.available | json }},
              sku: '{{ variant.sku | escape }}'
            },
          {% endfor %}
        {% endfor %}
      },
    {% endfor %}
  };
  
  // Helper to format as currency
  const fmt = new Intl.NumberFormat(undefined, { style: 'currency', currency: 'USD' });
  
  function priceForBrand(brand) {
    const n = BRAND_PRICES.hasOwnProperty(brand) ? BRAND_PRICES[brand] : 10.0;
    return Number.isFinite(n) ? n : 10.0;
  }
</script>

<div class="header">WTF | Welcome To Florida</div>
<div class="cart-status" id="cart-status">Cart: <span id="cart-count">0</span> items</div>

<div class="container">
  <a href="{{ routes.root_url }}" class="back-link">‚Üê Back to Menu</a>

  <div class="product-grid">
    <div class="product-image-section">
      <img src="{{ 'edibles_150x150.png' | asset_url }}" alt="Canned Drinks" class="product-image" width="150" height="150" loading="lazy">
    </div>

    <div class="product-details">
      <h1 class="product-title">Canned Drinks</h1>

      <!-- Dynamically updated by selected brand -->
      <div class="product-price" id="product-price">Select a brand to see price</div>

      <div class="price-placeholder">
        üí∞ Prices are pulled live from Shopify product data. {{ brands.size }} brands available.
      </div>

      <p class="product-description">
        Premium ready-to-drink beverages from top brands. Perfect for on-the-go enjoyment.
      </p>

      <div class="selection-section">
        <h3 class="section-title">ü•§ Choose Your Brand</h3>
        <div class="info-box">
          <strong>{{ brands.size }} Premium Brands Available:</strong> Select a brand first, then choose from available flavors.
        </div>
        <div class="brand-grid">
          {% for brand in brands %}
            <button type="button" class="brand-button" onclick="selectBrand('{{ brand | escape }}')">
              {{ brand }}
            </button>
          {% endfor %}
        </div>
      </div>

      {%- comment -%} Dynamic flavor sections for each brand {%- endcomment -%}
      {% for brand in brands %}
        {%- assign brand_products = all_products | where: 'vendor', brand -%}
        <div class="flavor-section" id="flavors-{{ brand | handleize }}">
          <h4 class="section-title">üçã Choose Your {{ brand }} Flavor</h4>
          <div class="flavor-grid">
            {% for product in brand_products %}
              {% assign variants_data = product.variants %}
              {% if variants_data.size > 1 %}
                {%- comment -%} Multi-variant product - each variant is a flavor {%- endcomment -%}
                {% for variant in variants_data %}
                  <button
                    type="button"
                    class="flavor-button"
                    data-variant-id="{{ variant.id }}"
                    data-price="{{ variant.price | money_without_currency }}"
                    data-sku="{{ variant.sku }}"
                    onclick="selectFlavorWithVariant('{{ variant.title | escape }}', '{{ variant.id }}', {{ variant.price | money_without_currency }})"
                    {% unless variant.available %}disabled{% endunless %}
                  >
                    {{ variant.title }}
                    {% unless variant.available %}<br><small>(Sold Out)</small>{% endunless %}
                  </button>
                {% endfor %}
              {% else %}
                {%- comment -%} Single-variant product - use product title as flavor {%- endcomment -%}
                {%- assign flavor = product.title | remove: brand | strip -%}
                {%- assign variant = variants_data | first -%}
                <button
                  type="button"
                  class="flavor-button"
                  data-variant-id="{{ variant.id }}"
                  data-price="{{ variant.price | money_without_currency }}"
                  data-sku="{{ variant.sku }}"
                  onclick="selectFlavorWithVariant('{{ flavor | escape }}', '{{ variant.id }}', {{ variant.price | money_without_currency }})"
                  {% unless variant.available %}disabled{% endunless %}
                >
                  {{ flavor }}
                  {% unless variant.available %}<br><small>(Sold Out)</small>{% endunless %}
                </button>
              {% endif %}
            {% endfor %}
          </div>
        </div>
      {% endfor %}

      {%- comment -%} Quantity controls {%- endcomment -%}
      <div class="selection-section">
        <h3 class="section-title">üì¶ Quantity</h3>
        <div class="quantity-controls">
          <button type="button" class="qty-btn" onclick="decrementQty()">‚àí</button>
          <input type="number" id="quantity" class="qty-input" value="1" min="1" max="99">
          <button type="button" class="qty-btn" onclick="incrementQty()">+</button>
        </div>
      </div>

      {%- comment -%} Comments {%- endcomment -%}
      <div class="selection-section">
        <h3 class="section-title">üí¨ Special Instructions (Optional)</h3>
        <textarea
          id="comments"
          class="comments-textarea"
          rows="3"
          placeholder="Any special requests or notes..."
        ></textarea>
      </div>

      {%- comment -%} Add to cart button {%- endcomment -%}
      <button type="button" class="add-to-cart-btn" id="add-to-cart-btn" onclick="addToCart()" disabled>
        Select Brand & Flavor to Add to Cart
      </button>

      <div class="success-message" id="success-message">
        ‚úÖ Added to cart! <a href="/cart">View Cart</a>
      </div>
    </div>
  </div>
</div>

<script>
  // State management
  let selectedBrand = null;
  let selectedFlavor = null;
  let selectedVariantId = null;
  let selectedPrice = 0;

  // Initialize cart count
  fetch('/cart.js')
    .then(r => r.json())
    .then(cart => {
      document.getElementById('cart-count').textContent = cart.item_count;
    })
    .catch(e => console.error('Cart fetch error:', e));

  // Brand selection
  function selectBrand(brand) {
    selectedBrand = brand;
    selectedFlavor = null;
    selectedVariantId = null;
    
    // Update UI
    document.querySelectorAll('.brand-button').forEach(btn => {
      btn.classList.remove('selected');
      if (btn.textContent.trim() === brand) {
        btn.classList.add('selected');
      }
    });
    
    // Hide all flavor sections
    document.querySelectorAll('.flavor-section').forEach(section => {
      section.classList.remove('show');
    });
    
    // Show selected brand's flavors
    const flavorSection = document.getElementById('flavors-' + brand.toLowerCase().replace(/[^a-z0-9]+/g, '-'));
    if (flavorSection) {
      flavorSection.classList.add('show');
    }
    
    // Update price display
    const price = priceForBrand(brand);
    document.getElementById('product-price').textContent = fmt.format(price);
    
    // Disable add to cart until flavor selected
    document.getElementById('add-to-cart-btn').disabled = true;
    document.getElementById('add-to-cart-btn').textContent = 'Select a Flavor';
  }

  // Flavor selection with variant
  function selectFlavorWithVariant(flavor, variantId, price) {
    selectedFlavor = flavor;
    selectedVariantId = variantId;
    selectedPrice = price;
    
    // Update UI
    document.querySelectorAll('.flavor-button').forEach(btn => {
      btn.classList.remove('selected');
    });
    event.target.classList.add('selected');
    
    // Update price
    document.getElementById('product-price').textContent = fmt.format(price);
    
    // Enable add to cart
    const btn = document.getElementById('add-to-cart-btn');
    btn.disabled = false;
    btn.textContent = `Add to Cart ‚Äî ${fmt.format(price)}`;
  }

  // Quantity controls
  function incrementQty() {
    const input = document.getElementById('quantity');
    const current = parseInt(input.value) || 1;
    input.value = Math.min(current + 1, 99);
  }

  function decrementQty() {
    const input = document.getElementById('quantity');
    const current = parseInt(input.value) || 1;
    input.value = Math.max(current - 1, 1);
  }

  // Add to cart
  function addToCart() {
    if (!selectedVariantId) {
      alert('Please select a brand and flavor');
      return;
    }
    
    const qty = parseInt(document.getElementById('quantity').value) || 1;
    const comments = document.getElementById('comments').value.trim();
    const btn = document.getElementById('add-to-cart-btn');
    
    // Disable button during request
    btn.disabled = true;
    btn.textContent = 'Adding...';
    
    // Build request body
    const body = {
      id: selectedVariantId,
      quantity: qty
    };
    
    // Add comments as line item property if provided
    if (comments) {
      body.properties = { Comments: comments };
    }
    
    // Add to cart via AJAX
    fetch('/cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    })
    .then(response => {
      if (!response.ok) throw new Error('Add to cart failed');
      return response.json();
    })
    .then(data => {
      // Success!
      console.log('Added to cart:', data);
      
      // Update cart count
      return fetch('/cart.js');
    })
    .then(r => r.json())
    .then(cart => {
      document.getElementById('cart-count').textContent = cart.item_count;
      
      // Show success message
      const msg = document.getElementById('success-message');
      msg.classList.add('show');
      setTimeout(() => msg.classList.remove('show'), 5000);
      
      // Open cart drawer if available
      if (window.WTF_CART && typeof window.WTF_CART.open === 'function') {
        window.WTF_CART.open();
      }
      
      // Analytics push
      if (window.dataLayer) {
        window.dataLayer.push({
          event: 'add_to_cart',
          ecommerce: {
            items: [{
              item_name: selectedBrand + ' - ' + selectedFlavor,
              item_variant: selectedFlavor,
              price: selectedPrice,
              quantity: qty
            }]
          }
        });
      }
      
      // Reset button
      btn.disabled = false;
      btn.textContent = `Add to Cart ‚Äî ${fmt.format(selectedPrice)}`;
    })
    .catch(error => {
      console.error('Add to cart error:', error);
      alert('Error adding to cart. Please try again.');
      btn.disabled = false;
      btn.textContent = `Add to Cart ‚Äî ${fmt.format(selectedPrice)}`;
    });
  }
</script>

