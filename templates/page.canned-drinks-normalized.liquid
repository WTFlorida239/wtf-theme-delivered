{%- comment -%}
  Dynamic Canned Drinks Page with Storefront API + Brand Normalization
  Loads products dynamically from the 'canned-drinks' collection via JavaScript
  Filters and remaps brands to fix duplication and incorrect grouping
{%- endcomment -%}

<style>
  * { box-sizing: border-box; margin: 0; padding: 0; }
  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f8f9fa; line-height: 1.6; }
  .header { background: #ff6600; color: white; padding: 15px 0; text-align: center; font-size: 24px; font-weight: bold; }
  .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
  .back-link { display: inline-block; color: #ff6600; text-decoration: none; font-weight: bold; font-size: 16px; margin-bottom: 20px; padding: 10px 15px; border: 2px solid #ff6600; border-radius: 5px; transition: all 0.3s ease; }
  .back-link:hover { background: #ff6600; color: white; }
  .product-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 40px; align-items: start; }
  .product-image { width: 100%; max-width: 400px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
  .product-details { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
  .product-title { font-size: 32px; color: #333; margin-bottom: 10px; font-weight: bold; }
  .product-price { font-size: 24px; color: #ff6600; font-weight: bold; margin-bottom: 15px; }
  .price-placeholder { background: #d1ecf1; color: #0c5460; padding: 10px; border-radius: 5px; margin: 10px 0; font-size: 14px; border: 1px solid #bee5eb; }
  .product-description { color: #666; margin-bottom: 30px; line-height: 1.6; font-size: 16px; }
  .selection-section { margin: 30px 0; border-bottom: 1px solid #eee; padding-bottom: 20px; }
  .selection-section:last-child { border-bottom: none; }
  .section-title { font-size: 18px; font-weight: bold; color: #333; margin-bottom: 15px; }
  .brand-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin-bottom: 20px; }
  .brand-button { padding: 15px; border: 3px solid #ddd; border-radius: 8px; text-align: center; background: white; cursor: pointer; transition: all 0.3s ease; color: #333; font-size: 14px; font-family: inherit; min-height: 60px; display: flex; align-items: center; justify-content: center; font-weight: bold; }
  .brand-button:hover { border-color: #ff6600; transform: translateY(-2px); box-shadow: 0 4px 8px rgba(255,102,0,0.2); }
  .brand-button.selected { background: #ff6600; color: white; border-color: #ff6600; }
  .flavor-section { display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 8px; }
  .flavor-section.show { display: block; }
  .flavor-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 8px; }
  .flavor-button { padding: 12px 8px; border: 2px solid #ddd; border-radius: 6px; text-align: center; background: white; cursor: pointer; transition: all 0.3s ease; font-size: 13px; color: #333; font-family: inherit; min-height: 50px; display: flex; align-items: center; justify-content: center; }
  .flavor-button:hover:not(:disabled) { border-color: #28a745; transform: translateY(-1px); }
  .flavor-button.selected { background: #28a745; color: white; border-color: #28a745; font-weight: bold; }
  .flavor-button:disabled { opacity: 0.5; cursor: not-allowed; background: #f8f9fa; }
  .quantity-controls { display: flex; align-items: center; gap: 15px; }
  .qty-btn { width: 40px; height: 40px; border: 2px solid #ff6600; background: white; color: #ff6600; border-radius: 50%; cursor: pointer; font-size: 18px; font-weight: bold; font-family: inherit; transition: all 0.3s ease; }
  .qty-btn:hover { background: #ff6600; color: white; transform: scale(1.1); }
  .qty-input { width: 80px; text-align: center; padding: 10px; border: 2px solid #ddd; border-radius: 5px; font-size: 16px; font-family: inherit; }
  .comments-textarea { width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 5px; resize: vertical; font-family: inherit; font-size: 14px; line-height: 1.4; }
  .comments-textarea:focus { border-color: #ff6600; outline: none; }
  .add-to-cart-btn { width: 100%; padding: 18px; background: #ff6600; color: white; border: none; border-radius: 8px; font-size: 18px; font-weight: bold; cursor: pointer; margin-top: 20px; font-family: inherit; transition: all 0.3s ease; }
  .add-to-cart-btn:hover:not(:disabled) { background: #e55a00; transform: translateY(-2px); box-shadow: 0 4px 12px rgba(255,102,0,0.3); }
  .add-to-cart-btn:disabled { background: #ccc; cursor: not-allowed; transform: none; box-shadow: none; }
  .success-message { background: #d4edda; color: #155724; padding: 15px; border-radius: 5px; margin: 15px 0; border: 1px solid #c3e6cb; display: none; font-size: 14px; line-height: 1.4; }
  .success-message.show { display: block; }
  .cart-status { position: fixed; top: 20px; right: 20px; background: #ff6600; color: white; padding: 10px 15px; border-radius: 25px; font-weight: bold; z-index: 1000; box-shadow: 0 4px 12px rgba(255,102,0,0.3); }
  .info-box { background: #e7f3ff; padding: 15px; border-radius: 8px; margin-bottom: 15px; color: #333; font-size: 14px; line-height: 1.4; }
  .loading { text-align: center; padding: 40px; color: #666; }
  @media (max-width: 768px) { 
    .product-grid { grid-template-columns: 1fr; } 
    .brand-grid { grid-template-columns: repeat(2, 1fr); } 
    .flavor-grid { grid-template-columns: repeat(2, 1fr); } 
    .product-details { padding: 20px; } 
  }
</style>

<div class="header">WTF | Welcome To Florida</div>
<div class="cart-status" id="cart-status">Cart: <span id="cart-count">0</span> items</div>

<div class="container">
  <a href="{{ routes.root_url }}" class="back-link">‚Üê Back to Menu</a>

  <div class="product-grid">
    <div class="product-image-section">
      <img src="{{ 'edibles_150x150.png' | asset_url }}" alt="Canned Drinks" class="product-image" width="150" height="150" loading="lazy">
    </div>

    <div class="product-details">
      <h1 class="product-title">Canned Drinks</h1>

      <div class="product-price" id="product-price">Loading...</div>

      <div class="price-placeholder">
        üí∞ Prices are pulled live from Shopify product data. Loading brands...
      </div>

      <p class="product-description">
        Premium ready-to-drink beverages from top brands. Perfect for on-the-go enjoyment.
      </p>

      <div class="selection-section">
        <h3 class="section-title">ü•§ Choose Your Brand</h3>
        <div class="info-box" id="brands-info">
          <div class="loading">‚è≥ Loading brands from collection...</div>
        </div>
        <div class="brand-grid" id="brand-grid"></div>
      </div>

      <div id="flavor-sections-container"></div>

      <div class="selection-section">
        <h3 class="section-title">üì¶ Quantity</h3>
        <div class="quantity-controls">
          <button type="button" class="qty-btn" onclick="decrementQty()">‚àí</button>
          <input type="number" id="quantity" class="qty-input" value="1" min="1" max="99">
          <button type="button" class="qty-btn" onclick="incrementQty()">+</button>
        </div>
      </div>

      <div class="selection-section">
        <h3 class="section-title">üí¨ Special Instructions (Optional)</h3>
        <textarea
          id="comments"
          class="comments-textarea"
          rows="3"
          placeholder="Any special requests or notes..."
        ></textarea>
      </div>

      <button type="button" class="add-to-cart-btn" id="add-to-cart-btn" onclick="addToCart()" disabled>
        Select Brand & Flavor to Add to Cart
      </button>

      <div class="success-message" id="success-message">
        ‚úÖ Added to cart! <a href="/cart">View Cart</a>
      </div>
    </div>
  </div>
</div>

<script>
(function() {
  // Brand normalization configuration
  const BRAND_NORMALIZATION = {
    // Products to exclude (deprecated or duplicates)
    excludedProducts: [
      'White Rabbit Kratom Cans',
      'Tea Time Kratom Cans',
      'Botanical Brewing Cans'
    ],
    
    // Vendor remapping for "WTF | Welcome To Florida" products
    vendorRemapping: {
      'Crank Cannabis Beverages': 'Crank Cannabis Beverages',
      'Lumenade Cans': 'Lumenade'
    }
  };
  
  // Global state
  let allProducts = [];
  let brandData = {};
  let selectedBrand = null;
  let selectedFlavor = null;
  let selectedVariantId = null;
  let selectedPrice = 0;
  
  const fmt = new Intl.NumberFormat(undefined, { style: 'currency', currency: 'USD' });
  
  // Initialize cart count
  fetch('/cart.js')
    .then(r => r.json())
    .then(cart => {
      document.getElementById('cart-count').textContent = cart.item_count;
    })
    .catch(e => console.error('Cart fetch error:', e));
  
  // Normalize brand name based on vendor and product title
  function normalizeBrand(product) {
    const vendor = product.vendor || 'Unknown';
    const title = product.title || '';
    
    // Check if product should be excluded
    if (BRAND_NORMALIZATION.excludedProducts.includes(title)) {
      return null; // Exclude this product
    }
    
    // Check if vendor needs remapping
    if (vendor === 'WTF | Welcome To Florida') {
      // Check if this product has a remapping
      if (BRAND_NORMALIZATION.vendorRemapping[title]) {
        return BRAND_NORMALIZATION.vendorRemapping[title];
      }
      // If no remapping found, exclude it (likely deprecated)
      return null;
    }
    
    // Return vendor as-is for all other products
    return vendor;
  }
  
  // Fetch products from Storefront API
  async function loadProducts() {
    try {
      const response = await fetch('/collections/canned-drinks/products.json');
      const data = await response.json();
      
      allProducts = data.products;
      
      if (allProducts.length === 0) {
        document.getElementById('brands-info').innerHTML = '<strong>‚ö†Ô∏è No products found in collection</strong>';
        return;
      }
      
      // Group products by normalized brand
      allProducts.forEach(product => {
        const brand = normalizeBrand(product);
        
        // Skip excluded products
        if (!brand) {
          console.log('Excluding product:', product.title);
          return;
        }
        
        if (!brandData[brand]) {
          brandData[brand] = {
            products: [],
            minPrice: Infinity
          };
        }
        brandData[brand].products.push(product);
        
        // Track min price for brand
        product.variants.forEach(variant => {
          const price = parseFloat(variant.price);
          if (price > 0 && price < brandData[brand].minPrice) {
            brandData[brand].minPrice = price;
          }
        });
      });
      
      // Remove brands with no valid products or zero prices
      Object.keys(brandData).forEach(brand => {
        if (brandData[brand].products.length === 0 || brandData[brand].minPrice === Infinity || brandData[brand].minPrice === 0) {
          console.log('Removing brand with no valid products:', brand);
          delete brandData[brand];
        }
      });
      
      // Render brands
      renderBrands();
      
    } catch (error) {
      console.error('Error loading products:', error);
      document.getElementById('brands-info').innerHTML = '<strong>‚ùå Error loading products. Please refresh the page.</strong>';
    }
  }
  
  // Render brand buttons
  function renderBrands() {
    const brands = Object.keys(brandData).sort();
    const brandGrid = document.getElementById('brand-grid');
    const brandsInfo = document.getElementById('brands-info');
    
    brandsInfo.innerHTML = `<strong>${brands.length} Premium Brands Available:</strong> Select a brand first, then choose from available flavors.`;
    
    brandGrid.innerHTML = '';
    brands.forEach(brand => {
      const button = document.createElement('button');
      button.type = 'button';
      button.className = 'brand-button';
      button.textContent = brand;
      button.onclick = () => selectBrand(brand);
      brandGrid.appendChild(button);
    });
    
    // Render flavor sections (hidden initially)
    renderFlavorSections();
    
    // Update price display
    document.getElementById('product-price').textContent = 'Select a brand to see price';
  }
  
  // Render flavor sections for all brands
  function renderFlavorSections() {
    const container = document.getElementById('flavor-sections-container');
    container.innerHTML = '';
    
    Object.keys(brandData).forEach(brand => {
      const section = document.createElement('div');
      section.className = 'flavor-section';
      section.id = `flavors-${brand.toLowerCase().replace(/[^a-z0-9]+/g, '-')}`;
      
      const title = document.createElement('h4');
      title.className = 'section-title';
      title.textContent = `üçã Choose Your ${brand} Flavor`;
      section.appendChild(title);
      
      const flavorGrid = document.createElement('div');
      flavorGrid.className = 'flavor-grid';
      
      brandData[brand].products.forEach(product => {
        if (product.variants.length > 1) {
          // Multi-variant product
          product.variants.forEach(variant => {
            // Skip zero-price variants
            if (parseFloat(variant.price) > 0) {
              const button = createFlavorButton(variant.title, variant.id, variant.price, variant.available);
              flavorGrid.appendChild(button);
            }
          });
        } else {
          // Single-variant product
          const variant = product.variants[0];
          // Skip zero-price products
          if (parseFloat(variant.price) > 0) {
            const flavorName = product.title.replace(brand, '').trim();
            const button = createFlavorButton(flavorName, variant.id, variant.price, variant.available);
            flavorGrid.appendChild(button);
          }
        }
      });
      
      section.appendChild(flavorGrid);
      container.appendChild(section);
    });
  }
  
  // Create flavor button
  function createFlavorButton(title, variantId, price, available) {
    const button = document.createElement('button');
    button.type = 'button';
    button.className = 'flavor-button';
    button.dataset.variantId = variantId;
    button.dataset.price = price;
    
    if (!available) {
      button.disabled = true;
      button.innerHTML = `${title}<br><small>(Sold Out)</small>`;
    } else {
      button.textContent = title;
      button.onclick = () => selectFlavorWithVariant(title, variantId, parseFloat(price));
    }
    
    return button;
  }
  
  // Brand selection
  window.selectBrand = function(brand) {
    selectedBrand = brand;
    selectedFlavor = null;
    selectedVariantId = null;
    
    // Update UI
    document.querySelectorAll('.brand-button').forEach(btn => {
      btn.classList.remove('selected');
      if (btn.textContent.trim() === brand) {
        btn.classList.add('selected');
      }
    });
    
    // Hide all flavor sections
    document.querySelectorAll('.flavor-section').forEach(section => {
      section.classList.remove('show');
    });
    
    // Show selected brand's flavors
    const flavorSection = document.getElementById(`flavors-${brand.toLowerCase().replace(/[^a-z0-9]+/g, '-')}`);
    if (flavorSection) {
      flavorSection.classList.add('show');
    }
    
    // Update price display
    const price = brandData[brand].minPrice;
    document.getElementById('product-price').textContent = fmt.format(price);
    
    // Disable add to cart until flavor selected
    document.getElementById('add-to-cart-btn').disabled = true;
    document.getElementById('add-to-cart-btn').textContent = 'Select a Flavor';
  };
  
  // Flavor selection
  window.selectFlavorWithVariant = function(flavor, variantId, price) {
    selectedFlavor = flavor;
    selectedVariantId = variantId;
    selectedPrice = price;
    
    // Update UI
    document.querySelectorAll('.flavor-button').forEach(btn => {
      btn.classList.remove('selected');
    });
    event.target.classList.add('selected');
    
    // Update price
    document.getElementById('product-price').textContent = fmt.format(price);
    
    // Enable add to cart
    const btn = document.getElementById('add-to-cart-btn');
    btn.disabled = false;
    btn.textContent = `Add to Cart ‚Äî ${fmt.format(price)}`;
  };
  
  // Quantity controls
  window.incrementQty = function() {
    const input = document.getElementById('quantity');
    const current = parseInt(input.value) || 1;
    input.value = Math.min(current + 1, 99);
  };
  
  window.decrementQty = function() {
    const input = document.getElementById('quantity');
    const current = parseInt(input.value) || 1;
    input.value = Math.max(current - 1, 1);
  };
  
  // Add to cart
  window.addToCart = function() {
    if (!selectedVariantId) {
      alert('Please select a brand and flavor');
      return;
    }
    
    const qty = parseInt(document.getElementById('quantity').value) || 1;
    const comments = document.getElementById('comments').value.trim();
    const btn = document.getElementById('add-to-cart-btn');
    
    // Disable button during request
    btn.disabled = true;
    btn.textContent = 'Adding...';
    
    // Build request body
    const body = {
      id: selectedVariantId,
      quantity: qty
    };
    
    // Add comments as line item property if provided
    if (comments) {
      body.properties = { Comments: comments };
    }
    
    // Add to cart via AJAX
    fetch('/cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    })
    .then(response => {
      if (!response.ok) throw new Error('Add to cart failed');
      return response.json();
    })
    .then(data => {
      console.log('Added to cart:', data);
      return fetch('/cart.js');
    })
    .then(r => r.json())
    .then(cart => {
      document.getElementById('cart-count').textContent = cart.item_count;
      
      // Show success message
      const msg = document.getElementById('success-message');
      msg.classList.add('show');
      setTimeout(() => msg.classList.remove('show'), 5000);
      
      // Open cart drawer if available
      if (window.WTF_CART && typeof window.WTF_CART.open === 'function') {
        window.WTF_CART.open();
      }
      
      // Analytics push
      if (window.dataLayer) {
        window.dataLayer.push({
          event: 'add_to_cart',
          ecommerce: {
            items: [{
              item_name: selectedBrand + ' - ' + selectedFlavor,
              item_variant: selectedFlavor,
              price: selectedPrice,
              quantity: qty
            }]
          }
        });
      }
      
      // Reset button
      btn.disabled = false;
      btn.textContent = `Add to Cart ‚Äî ${fmt.format(selectedPrice)}`;
    })
    .catch(error => {
      console.error('Add to cart error:', error);
      alert('Error adding to cart. Please try again.');
      btn.disabled = false;
      btn.textContent = `Add to Cart ‚Äî ${fmt.format(selectedPrice)}`;
    });
  };
  
  // Load products on page load
  loadProducts();
})();
</script>

