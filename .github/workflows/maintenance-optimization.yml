name: Theme Maintenance & Optimization

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      maintenance_type:
        description: 'Type of maintenance to run'
        required: true
        default: 'full'
        type: choice
        options: [ full, cleanup, optimization, backup ]

# Avoid overlapping runs
concurrency:
  group: maint-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.SHOPIFY_CLI_THEME_TOKEN }}
  SHOPIFY_STORE: wtfswag.myshopify.com
  SHOPIFY_FLAG_STORE: wtfswag.myshopify.com
  # housekeeping retention (days) for old staging/backup themes
  THEME_RETENTION_DAYS: "14"

jobs:
  theme-backup:
    name: Theme Backup (duplicate in store + local tarball)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || inputs.maintenance_type == 'full' || inputs.maintenance_type == 'backup' }}

    steps:
      - name: Checkout (for workspace only)
        uses: actions/checkout@v4

      - name: Install Shopify CLI + tools
        run: |
          set -euo pipefail
          npm install -g @shopify/cli @shopify/theme
          sudo apt-get update && sudo apt-get install -y jq tar

      - name: Preflight
        run: |
          set -euo pipefail
          if [ -z "${SHOPIFY_CLI_THEME_TOKEN:-}" ]; then
            echo "::error:: SHOPIFY_CLI_THEME_TOKEN not set. Add a Theme Access token in repo secrets."
            exit 1
          fi
          shopify version || true

      - name: Identify live theme
        id: live
        run: |
          set -euo pipefail
          shopify theme list --json > themes.json
          LIVE_ID=$(jq -r '.[] | select(.role=="main") | .id' < themes.json)
          if [ -z "$LIVE_ID" ] || [ "$LIVE_ID" = "null" ]; then
            echo "::error:: Could not determine live theme id"; exit 1
          fi
          echo "live_id=$LIVE_ID" >> "$GITHUB_OUTPUT"

      - name: Duplicate live theme in store (backup)
        id: duplicate
        run: |
          set -euo pipefail
          STAMP=$(date +%Y%m%d-%H%M%S)
          BK_NAME="WTF-Live-Backup-$STAMP"
          shopify theme duplicate --theme="${{ steps.live.outputs.live_id }}" --name="$BK_NAME" --json > backup.json
          BK_ID=$(jq -r '.theme.id' < backup.json)
          echo "backup_id=$BK_ID"   >> "$GITHUB_OUTPUT"
          echo "backup_name=$BK_NAME" >> "$GITHUB_OUTPUT"
          echo "✅ Backup duplicated in store: $BK_NAME (ID: $BK_ID)"

      - name: Pull live theme & archive
        id: archive
        run: |
          set -euo pipefail
          STAMP=$(date +%Y%m%d-%H%M%S)
          DIR="theme-backup-$STAMP"
          mkdir -p "$DIR"
          shopify theme pull --theme="${{ steps.live.outputs.live_id }}" --path="$DIR"
          TAR="wtf-theme-backup-$STAMP.tar.gz"
          tar -czf "$TAR" "$DIR"
          echo "backup_dir=$DIR" >> "$GITHUB_OUTPUT"
          echo "backup_tar=$TAR" >> "$GITHUB_OUTPUT"
          echo "✅ Local archive created: $TAR"

      - name: Upload backup artifacts
        uses: actions/upload-artifact@v4
        with:
          name: theme-backup-${{ steps.archive.outputs.backup_dir }}
          path: |
            ${{ steps.archive.outputs.backup_tar }}
            ${{ steps.archive.outputs.backup_dir }}/
            themes.json
            backup.json
          retention-days: 90
          if-no-files-found: ignore

  cleanup-old-files:
    name: Cleanup Old Files
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || inputs.maintenance_type == 'full' || inputs.maintenance_type == 'cleanup' }}

    steps:
      - uses: actions/checkout@v4

      - name: Run cleanup script + hygiene
        run: |
          set -euo pipefail
          echo "Running cleanup operations..."
          if [ -f "cleanup.sh" ]; then chmod +x cleanup.sh && ./cleanup.sh; fi

          echo "Cleaning temp/log/system cruft..."
          find . -type f -name "*.tmp" -delete
          find . -type f -name "*.log" -mtime +30 -delete
          find . -type f -name ".DS_Store" -delete

          echo "Cleaning old local backup directories..."
          find . -maxdepth 1 -type d -name "theme-backup-*" -mtime +30 -print -exec rm -rf {} \; || true
          find . -maxdepth 1 -type f -name "wtf-theme-backup-*.tar.gz" -mtime +90 -print -delete || true

          echo "Scanning assets for manual image optimization opportunities..."
          find assets/ \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.webp" -o -iname "*.svg" \) -printf "%s\t%p\n" \
            | sort -nr | awk 'BEGIN{printf "SIZE(bytes)\tPATH\n"} {print}' | tee image-candidates.tsv

          echo "✅ Cleanup completed"

      - name: Cleanup report
        run: |
          set -euo pipefail
          {
            echo "# WTF Theme Cleanup Report"
            echo
            echo "**Date:** $(date)"
            echo "**Mode:** ${{ inputs.maintenance_type || 'scheduled' }}"
            echo
            echo "## File Statistics"
            echo "- Total files: $(find . -type f | wc -l)"
            echo "- Liquid files: $(find . -name "*.liquid" | wc -l)"
            echo "- CSS files: $(find . -name "*.css" | wc -l)"
            echo "- JS files: $(find . -name "*.js" | wc -l)"
            echo "- Image files: $(find . -regex '.*\\.\(jpg\\|jpeg\\|png\\|gif\\|webp\\|svg\\)$' | wc -l)"
            echo
            echo "## Large image candidates (top 25 by size)"
            head -n 26 image-candidates.tsv || true
          } > cleanup-report.md

      - uses: actions/upload-artifact@v4
        with:
          name: cleanup-report
          path: |
            cleanup-report.md
            image-candidates.tsv
          retention-days: 30
          if-no-files-found: ignore

  performance-optimization:
    name: Performance Analysis & Recommendations
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || inputs.maintenance_type == 'full' || inputs.maintenance_type == 'optimization' }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node & tools
        run: |
          set -euo pipefail
          npm install -g csso-cli terser svgo
          sudo apt-get update && sudo apt-get install -y jq

      - name: Analyze asset sizes (CSS/JS/SVG)
        run: |
          set -euo pipefail
          mkdir -p reports
          echo "SIZE(bytes)  PATH" > reports/asset-sizes.tsv
          find assets/ -type f \( -iname "*.css" -o -iname "*.js" -o -iname "*.svg" \) -printf "%s  %p\n" \
            | sort -nr >> reports/asset-sizes.tsv
          head -n 30 reports/asset-sizes.tsv > reports/top-assets.tsv || true

      - name: Quick lints (console logs, nested loops, assigns-in-loop)
        run: |
          set -euo pipefail
          # JS debug statements
          grep -R --line-number --include="*.js" "console\." assets/ > reports/js-console.txt || true
          # Potentially heavy Liquid patterns
          grep -R --line-number --include="*.liquid" -E "for .* in .*for .* in" . > reports/liquid-nested-loops.txt || true
          grep -R --line-number --include="*.liquid" -E "{% *assign .* %}" . | \
            grep -B1 -A1 -E "{% *for " > reports/liquid-assign-in-loop.txt || true

      - name: Produce optimization report
        run: |
          set -euo pipefail
          {
            echo "# WTF Theme Performance Optimization Report"
            echo
            echo "**Date:** $(date)"
            echo
            echo "## Largest assets (top 30)"
            cat reports/top-assets.tsv || true
            echo
            echo "## JS debug statements"
            if [ -s reports/js-console.txt ]; then
              echo "⚠️ Found debug logs:"; head -n 50 reports/js-console.txt; else echo "✅ None found"; fi
            echo
            echo "## Liquid patterns to review"
            echo "- Nested loops:"; if [ -s reports/liquid-nested-loops.txt ]; then head -n 50 reports/liquid-nested-loops.txt; else echo "✅ None flagged"; fi
            echo "- Assignments inside loops:"; if [ -s reports/liquid-assign-in-loop.txt ]; then head -n 50 reports/liquid-assign-in-loop.txt; else echo "✅ None flagged"; fi
            echo
            echo "## Recommendations"
            echo "1) Minify & combine critical CSS/JS where safe (use csso/terser)."
            echo "2) Remove console/debug statements from production bundles."
            echo "3) Refactor heavy Liquid loops; precompute data where possible."
            echo "4) Serve modern formats (WebP/AVIF) and lazy-load below-the-fold images."
            echo "5) Split vendor JS and defer non-critical scripts."
          } > optimization-report.md

      - uses: actions/upload-artifact@v4
        with:
          name: optimization-report
          path: |
            optimization-report.md
            reports/
          retention-days: 30
          if-no-files-found: ignore

  dependency-updates:
    name: Dependency Updates (advisory)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || inputs.maintenance_type == 'full' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check for dependency updates
        run: |
          set -euo pipefail
          if [ -f package.json ]; then
            npm install -g npm-check-updates
            ncu > dependency-updates.txt
            echo "✅ Dependency update scan complete"
          else
            echo "⏭️ No package.json found; skipping"
          fi

      - name: Shopify CLI version
        run: |
          set -euo pipefail
          CUR=$(npm list -g @shopify/cli --depth=0 2>/dev/null | awk -F@ '/@shopify\/cli@/{print $3}' || echo "not installed")
          LATEST=$(npm show @shopify/cli version 2>/dev/null || echo "unknown")
          {
            echo "# Shopify CLI Status"
            echo "- Current: $CUR"
            echo "- Latest:  $LATEST"
            if [ "$CUR" != "$LATEST" ] && [ "$CUR" != "not installed" ] && [ "$LATEST" != "unknown" ]; then
              echo "- Update available"
            else
              echo "- Up to date or unknown"
            fi
          } > cli-status.md

      - name: Create dependency report
        run: |
          set -euo pipefail
          {
            echo "# WTF Theme Dependency Report"
            echo
            echo "**Date:** $(date)"
            echo
            if [ -f package.json ]; then
              echo "## package.json (excerpt)"
              jq '.dependencies, .devDependencies' package.json || cat package.json
            else
              echo "No package.json present"
            fi
            echo
            echo "## Shopify CLI"
            cat cli-status.md
          } > dependency-report.md

      - uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: |
            dependency-report.md
            dependency-updates.txt
            cli-status.md
          retention-days: 30
          if-no-files-found: ignore

  theme-housekeeping:
    name: Theme Housekeeping (dry-run)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || inputs.maintenance_type == 'full' || inputs.maintenance_type == 'cleanup' }}
    steps:
      - name: Install Shopify CLI + jq
        run: |
          set -euo pipefail
          npm install -g @shopify/cli @shopify/theme
          sudo apt-get update && sudo apt-get install -y jq

      - name: Identify old staging/backup themes (dry-run)
        run: |
          set -euo pipefail
          shopify theme list --json > all-themes.json
          echo "Candidates older than ${THEME_RETENTION_DAYS} days (names starting with WTF-Staging- or WTF-Live-Backup-):"
          # Many CLI versions omit created_at; keep dry-run conservative
          jq -r '
            .[] | select(.role=="unpublished" and (.name|startswith("WTF-Staging-") or .name|startswith("WTF-Live-Backup-")))
            | "\(.id)\t\(.name)\tcreated_at=\(.created_at // "unknown")"
          ' all-themes.json > housekeeping-candidates.tsv
          cat housekeeping-candidates.tsv || true
          echo "ℹ️ Dry-run. Enable deletion only after confirming created_at is available in your store/CLI."

      - uses: actions/upload-artifact@v4
        with:
          name: theme-housekeeping
          path: |
            all-themes.json
            housekeeping-candidates.tsv
          retention-days: 14
          if-no-files-found: ignore

  maintenance-summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    needs:
      - theme-backup
      - cleanup-old-files
      - performance-optimization
      - dependency-updates
      - theme-housekeeping
    if: always()

    steps:
      - name: Create maintenance summary
        run: |
          set -euo pipefail
          cat > maintenance-summary.md <<EOF
          # WTF Theme Maintenance Summary

          **Date:** $(date)
          **Type:** ${{ inputs.maintenance_type || 'scheduled' }}
          **Run:**  ${{ github.run_number }}

          ## Task Status
          - Theme Backup:           ${{ needs.theme-backup.result }}
          - Cleanup Old Files:      ${{ needs.cleanup-old-files.result }}
          - Performance Analysis:   ${{ needs.performance-optimization.result }}
          - Dependency Updates:     ${{ needs.dependency-updates.result }}
          - Theme Housekeeping:     ${{ needs.theme-housekeeping.result }}

          ## Next Steps
          1. Review backup artifacts and store duplicate name/ID
          2. Triage optimization-report.md & fix flagged items
          3. Consider deleting stale staging/backups after manual review
          4. Apply dependency updates in a PR and test in staging
          EOF

      - uses: actions/upload-artifact@v4
        with:
          name: maintenance-summary
          path: maintenance-summary.md
          retention-days: 90
          if-no-files-found: ignore
