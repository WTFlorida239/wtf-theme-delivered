name: WTF Theme CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - "**/*.liquid"
      - "config/**"
      - "assets/**"
      - "locales/**"
      - "templates/**"
      - "sections/**"
      - "snippets/**"
      - "package.json"
      - "package-lock.json"
      - ".github/workflows/wtf-theme-ci.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "**/*.liquid"
      - "config/**"
      - "assets/**"
      - "locales/**"
      - "templates/**"
      - "sections/**"
      - "snippets/**"
      - "package.json"
      - "package-lock.json"
      - ".github/workflows/wtf-theme-ci.yml"
  workflow_dispatch:

concurrency:
  group: wtf-theme-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

env:
  SHOPIFY_STORE: wtfswag.myshopify.com
  # SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.SHOPIFY_CLI_THEME_TOKEN }} # (only needed if you add deploys later)

jobs:
  validate:
    name: Validate Theme (fast + reliable)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Shopify Theme Check (official; no CLI install)
      - name: Theme Check
        id: themecheck
        uses: shopify/theme-check-action@v2
        with:
          theme_root: '.'
          base: main
          token: ${{ github.token }}

      # 2) Node only if package.json exists
      - name: Setup Node (if needed)
        if: hashFiles('package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: npm ci (if package.json)
        if: hashFiles('package.json') != ''
        run: npm ci

      # 3) Optional project scripts ‚Äî skip if missing
      - name: conflicts:scan (if script exists)
        if: hashFiles('package.json') != ''
        run: |
          if npm run | grep -qE '(^|\s)conflicts:scan(\s|:)'; then
            npm run conflicts:scan
          else
            echo "‚è≠Ô∏è No conflicts:scan script; skipping"
          fi

      - name: competitors:audit (if script exists)
        if: hashFiles('package.json') != ''
        run: |
          if npm run | grep -qE '(^|\s)competitors:audit(\s|:)'; then
            npm run competitors:audit
          else
            echo "‚è≠Ô∏è No competitors:audit script; skipping"
          fi

      - name: order-readiness-check (if file exists)
        run: |
          if [ -f scripts/order-readiness-check.js ]; then
            node scripts/order-readiness-check.js
          else
            echo "‚è≠Ô∏è scripts/order-readiness-check.js not found; skipping"
          fi

      # 4) OS 2.0‚Äìaware file checks
      - name: Validate theme structure
        id: files
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Validating required theme files‚Ä¶"

          required=(
            "layout/theme.liquid"
            "config/settings_schema.json"
            "sections/main-product.liquid"
            "templates/product.json"
          )

          for f in "${required[@]}"; do
            if [[ ! -f "$f" ]]; then
              echo "‚ùå Missing required file: $f"
              echo "missing=true" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "‚úÖ $f"
            fi
          done

          # Optional section (warn only)
          if [[ -f "sections/enhanced-drink-builder.liquid" ]]; then
            echo "‚úÖ sections/enhanced-drink-builder.liquid"
          else
            echo "‚ÑπÔ∏è Optional: sections/enhanced-drink-builder.liquid not found"
          fi

          # Cart can be JSON (preferred) or Liquid
          if [[ -f "templates/cart.json" || -f "templates/cart.liquid" ]]; then
            echo "‚úÖ Cart template present"
          else
            echo "‚ùå Missing cart template (templates/cart.json preferred or templates/cart.liquid)"
            echo "missing=true" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Warn if no obvious JSON-LD path for product
          if grep -R -E "schema-product|application/json[^>]*ld\+json" sections/ snippets/ 2>/dev/null; then
            echo "‚úÖ Product schema reference detected"
          else
            echo "‚ö†Ô∏è No obvious Product JSON-LD found in sections/ or snippets/"
          fi

      # 5) Summaries (PR + job)
      - name: Write step summary
        if: always()
        shell: bash
        run: |
          {
            echo "## WTF Theme ‚Äì Validation Summary"
            echo ""
            echo "- Theme Check: **${{ steps.themecheck.outcome }}**"
            echo "- Structure check: **${{ steps.files.outcome }}**"
            echo ""
            echo "_Ensure Product JSON-LD renders on product pages for SEO rich results._"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Comment summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const body = [
              '### ‚úÖ WTF Theme ‚Äì Validation Summary',
              '',
              `- Theme Check: **${{ steps.themecheck.outcome }}**`,
              `- Structure check: **${{ steps.files.outcome }}**`,
              '',
              '_Ensure Product JSON-LD renders on product pages for SEO rich results._'
            ].join('\n');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Upload validation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-artifacts
          path: |
            docs/
            *.md
          if-no-files-found: ignore
          retention-days: 30

  security-scan:
    name: Security & Hygiene
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Scan for secrets & unsafe patterns
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "üîé Scanning for secrets‚Ä¶"
          FOUND=0

          if grep -R --line-number -E 'shpat_[0-9a-zA-Z]+' . --exclude-dir=.git --exclude=*.ya?ml || true; then
            echo "‚ùå Potential Shopify token found in repo"
            FOUND=1
          fi

          echo "üîé Checking unsafe Liquid patterns (informational)‚Ä¶"
          PATTERNS=(
            '\|\s*raw'
            'assign.*request\.'
            'assign.*params\.'
          )
          for p in "${PATTERNS[@]}"; do
            if grep -R -n -E "$p" --include='*.liquid' . 2>/dev/null; then
              echo "‚ö†Ô∏è Possible unsafe Liquid pattern: $p"
            fi
          done

          echo "üîé Executable bits on non-scripts (informational)‚Ä¶"
          find . -type f -perm /111 -not -path "./.git/*" -not -name "*.sh" -print | sed 's/^/‚ö†Ô∏è Exec file: /' || true

          if [[ $FOUND -ne 0 ]]; then
            exit 1
          fi
          echo "‚úÖ Security scan complete"

  lighthouse:
    name: Lighthouse (artifact only)
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Lighthouse CI
        run: npm i -g @lhci/cli

      # Replace these with real public/staging URLs when ready.
      - name: Run Lighthouse (placeholder)
        continue-on-error: true
        run: |
          set -euo pipefail
          mkdir -p lighthouse-results
          echo '{
            "home": {"performance": 0, "accessibility": 0, "bestPractices": 0, "seo": 0},
            "product": {"performance": 0, "accessibility": 0, "bestPractices": 0, "seo": 0}
          }' > lighthouse-results/placeholder.json
          echo "‚ÑπÔ∏è Configure real URLs later; storing placeholder results."

      - name: Upload Lighthouse artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: lighthouse-results/
          retention-days: 14

  notify:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [validate, security-scan, lighthouse]
    if: always()

    steps:
      - name: Print summary
        shell: bash
        run: |
          echo "# CI Summary"
          echo ""
          echo "Validate:      ${{ needs.validate.result }}"
          echo "Security-scan: ${{ needs.security-scan.result }}"
          echo "Lighthouse:    ${{ needs.lighthouse.result || 'skipped' }}"
          if [ "${{ needs.validate.result }}" != "success" ] || [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "üî¥ Not ready ‚Äî fix failures above."
            exit 1
          else
            echo "üü¢ Looks good."
          fi
