name: WTF Theme CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - "**/*.liquid"
      - "config/**"
      - "assets/**"
      - "locales/**"
      - "templates/**"
      - "sections/**"
      - "snippets/**"
      - "package.json"
      - "package-lock.json"
      - ".github/workflows/wtf-theme-ci.yml"
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]
    paths:
      - "**/*.liquid"
      - "config/**"
      - "assets/**"
      - "locales/**"
      - "templates/**"
      - "sections/**"
      - "snippets/**"
      - "package.json"
      - "package-lock.json"
      - ".github/workflows/wtf-theme-ci.yml"
  pull_request_target:
    types: [closed]
  workflow_dispatch:

concurrency:
  group: wtf-theme-${{ github.workflow }}-${{ github.ref || github.event.pull_request.head.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  actions: read
  security-events: write

env:
  SHOPIFY_STORE: wtfswag.myshopify.com
  THEME_NAME_PREFIX: "WTF Preview"
  NODE_VERSION: '20'

jobs:
  changes:
    name: Detect relevant changes
    runs-on: ubuntu-latest
    outputs:
      theme: ${{ steps.filter.outputs.theme }}
      node:  ${{ steps.filter.outputs.node }}
      wf:    ${{ steps.filter.outputs.workflow }}
    steps:
      - uses: actions/checkout@v4
      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            theme:
              - '**/*.liquid'
              - 'config/**'
              - 'assets/**'
              - 'locales/**'
              - 'templates/**'
              - 'sections/**'
              - 'snippets/**'
            node:
              - 'package.json'
              - 'package-lock.json'
            workflow:
              - '.github/workflows/wtf-theme-ci.yml'

  validate:
    name: Validate Theme (fast + reliable)
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.theme == 'true' || needs.changes.outputs.node == 'true' || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v4

      # 0) Footer-section sanity lint (prevents "footer is not a valid section type")
      - name: Footer section sanity check
        id: footercheck
        shell: bash
        run: |
          set -Eeuo pipefail
          if grep -n "{% section 'footer' %}" -R layout/theme.liquid >/dev/null 2>&1; then
            if [[ ! -f sections/footer.liquid && ! -f sections/footer-group.liquid ]]; then
              echo "❌ layout/theme.liquid includes {% section 'footer' %} but no sections/footer*.liquid exists."
              exit 1
            fi
          fi
          echo "✅ Footer section sanity OK"

      # 1) Shopify Theme Check (+ SARIF)
      - name: Theme Check
        uses: shopify/theme-check-action@v2
        with:
          theme_root: '.'
          base: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Theme Check (SARIF)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./theme-check.sarif
          category: theme-check

      # 2) Node (if package.json)
      - uses: actions/setup-node@v4
        if: hashFiles('package.json') != ''
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: npm ci (if package.json)
        if: hashFiles('package.json') != ''
        run: npm ci

      # 3) Optional project scripts — skip if missing
      - name: conflicts:scan (if script exists)
        if: hashFiles('package.json') != ''
        run: |
          if npm run | grep -qE '(^|\s)conflicts:scan(\s|:)'; then
            npm run conflicts:scan
          else
            echo "⏭️ No conflicts:scan script; skipping"
          fi
      - name: order-readiness-check (if exists)
        run: |
          if [ -f scripts/order-readiness-check.js ]; then
            node scripts/order-readiness-check.js
          else
            echo "⏭️ scripts/order-readiness-check.js not found; skipping"
          fi

      # 4) OS 2.0 file checks
      - name: Validate theme structure
        id: files
        shell: bash
        run: |
          set -Eeuo pipefail
          required=( "layout/theme.liquid" "config/settings_schema.json" "sections/main-product.liquid" "templates/product.json" )
          for f in "${required[@]}"; do
            [[ -f "$f" ]] && echo "✅ $f" || { echo "❌ Missing: $f"; exit 1; }
          done
          [[ -f "templates/cart.json" || -f "templates/cart.liquid" ]] || { echo "❌ Missing cart template"; exit 1; }
          grep -R -E "schema-product|application/json[^>]*ld\\+json" sections/ snippets/ >/dev/null 2>&1 && echo "✅ JSON-LD present" || echo "⚠️ JSON-LD not detected"

      - name: Upload validation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-artifacts
          path: |
            docs/
            *.md
          if-no-files-found: ignore
          retention-days: 30

  preview-deploy:
    name: Deploy Preview Theme (PR only)
    runs-on: ubuntu-latest
    needs: validate
    if: >
      github.event_name == 'pull_request' &&
      needs.validate.result == 'success' &&
      github.event.pull_request.head.repo.full_name == github.repository &&
      (needs.changes.outputs.theme == 'true' || needs.changes.outputs.node == 'true')
    env:
      SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.SHOPIFY_CLI_THEME_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Shopify CLI
        run: npm i -g @shopify/cli @shopify/theme

      - name: Create/Update preview theme
        id: push
        run: |
          set -Eeuo pipefail
          THEME_NAME="${THEME_NAME_PREFIX} • PR #${{ github.event.number }} • ${{ github.sha::0:7 }}"
          echo "Pushing preview theme: $THEME_NAME"
          shopify theme push \
            --store "$SHOPIFY_STORE" \
            --theme "$THEME_NAME" \
            --unpublished \
            --json > push.json
          cat push.json
          THEME_ID=$(jq -r '.theme.id' push.json)
          PREVIEW_URL="https://${SHOPIFY_STORE}?preview_theme_id=${THEME_ID}"
          echo "theme_id=$THEME_ID" >> $GITHUB_OUTPUT
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Comment preview URL on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = `${{ steps.push.outputs.preview_url }}`;
            const id  = `${{ steps.push.outputs.theme_id }}`;
            const body = [
              '🚀 **Preview theme deployed**',
              '',
              `- Theme ID: \`${id}\``,
              `- Preview: ${url}`,
              '',
              '_This will be replaced/updated on new commits to this PR._'
            ].join('\n');
            github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, body });

  preview-cleanup:
    name: Cleanup Preview Theme (on PR close)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' && github.event.action == 'closed'
    env:
      SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.SHOPIFY_CLI_THEME_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Shopify CLI
        run: npm i -g @shopify/cli @shopify/theme
      - name: Delete preview theme(s) for this PR
        run: |
          set -Eeuo pipefail
          # list unpublished previews with this PR number in name and delete
          shopify theme list --store "$SHOPIFY_STORE" --json > list.json
          jq -r '.themes[] | select(.name | test("WTF Preview.*PR #${{ github.event.number }}")) | .id' list.json | while read -r id; do
            echo "Deleting preview theme $id"
            shopify theme delete --store "$SHOPIFY_STORE" --theme-id "$id" -f
          done

  security-scan:
    name: Security & Hygiene
    runs-on: ubuntu-latest
    needs: [changes, validate]
    if: ${{ (needs.changes.result == 'success' && (needs.changes.outputs.theme == 'true' || needs.changes.outputs.node == 'true')) || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v4
      - name: Scan for secrets & unsafe patterns
        shell: bash
        run: |
          set -Eeuo pipefail
          FOUND=0
          if grep -R --line-number -E 'shpat_[0-9a-zA-Z]+' . --exclude-dir=.git --exclude=*.ya?ml || true; then
            echo "❌ Potential Shopify token found"; FOUND=1; fi
          PATTERNS=('\|\s*raw' 'assign.*request\.' 'assign.*params\.')
          for p in "${PATTERNS[@]}"; do
            grep -R -n -E "$p" --include='*.liquid' . 2>/dev/null && echo "⚠️ Possible unsafe Liquid: $p" || true
          done
          if [[ $FOUND -ne 0 ]]; then exit 1; fi
          echo "✅ Security scan complete"

  lighthouse:
    name: Lighthouse (artifact only)
    runs-on: ubuntu-latest
    needs: [changes, validate]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.changes.outputs.theme == 'true' && needs.validate.result == 'success' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Lighthouse CI
        run: npm i -g @lhci/cli
      - name: Run Lighthouse (placeholder)
        continue-on-error: true
        run: |
          mkdir -p lighthouse-results
          echo '{"home":{"performance":0,"accessibility":0,"bestPractices":0,"seo":0}}' > lighthouse-results/placeholder.json
      - name: Upload Lighthouse artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: lighthouse-results/
          retention-days: 14

  notify:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [changes, validate, security-scan, lighthouse]
    if: always()
    steps:
      - name: Print summary
        shell: bash
        run: |
          echo "# CI Summary"
          echo " - theme changes: ${{ needs.changes.outputs.theme }}"
          echo " - node  changes: ${{ needs.changes.outputs.node }}"
          echo "Validate:      ${{ needs.validate.result || 'skipped' }}"
          echo "Security-scan: ${{ needs.security-scan.result || 'skipped' }}"
          echo "Lighthouse:    ${{ needs.lighthouse.result || 'skipped' }}"
          if [ "${{ needs.validate.result }}" != "success" ] && [ "${{ needs.validate.result }}" != "skipped" ]; then
            echo "🔴 Not ready — fix validation failures."; exit 1;
          elif [ "${{ needs.security-scan.result }}" = "failure" ]; then
            echo "🔴 Not ready — fix security failures."; exit 1;
          else
            echo "🟢 Looks good (or no relevant changes)."
          fi
