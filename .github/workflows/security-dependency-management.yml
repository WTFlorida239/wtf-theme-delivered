name: Security & Dependency Management

on:
  schedule:
    # Run daily at 3 AM UTC for security checks
    - cron: '0 3 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Avoid overlapping runs on the same ref
concurrency:
  group: secdep-${{ github.ref }}
  cancel-in-progress: true

# Default to least-privilege; escalate per job if needed
permissions:
  contents: read

env:
  SHOPIFY_STORE: wtfswag.myshopify.com

jobs:
  dependency-review:
    name: Dependency Review (PR gate)
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          comment-summary-in-pr: true

  secrets-scan:
    name: Secrets Scan (Gitleaks)
    runs-on: ubuntu-latest
    # Run on push & PR; scheduled runs can be noisy for huge histories—skip schedule
    if: ${{ github.event_name != 'schedule' }}
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --report-path gitleaks.sarif --report-format sarif
      - name: Upload SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install security tools
        run: |
          set -euo pipefail
          npm install -g npm-audit-resolver audit-ci

      - name: Run npm security audit (non-fatal on schedule)
        run: |
          set -euo pipefail
          echo "Running npm security audit..."
          if [ -f "package.json" ]; then
            npm audit --audit-level=moderate --json > npm-audit-results.json || true
            npm audit --audit-level=moderate || echo "Security vulnerabilities found"
            echo "✅ NPM security audit completed"
          else
            echo "⏭️ No package.json found, skipping npm audit"
          fi

      - name: Enforce audit policy with audit-ci (fail PR/push only)
        if: ${{ github.event_name != 'schedule' }}
        run: |
          set -euo pipefail
          if [ -f "package.json" ]; then
            # Fail if HIGH vulnerabilities exist; warn on MODERATE
            npx audit-ci --low --moderate --skip-dev --report-type full || (echo "❌ audit-ci policy failed" && exit 1)
          else
            echo "⏭️ No package.json found, skipping audit-ci"
          fi

      - name: Scan for hardcoded secrets
        run: |
          set -euo pipefail
          echo "Scanning for hardcoded secrets..."

          secrets_found=false

          # Shopify tokens
          if grep -R --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" --exclude="*.md" -n "shpat_" . ; then
            echo "❌ Found potential Shopify access tokens"
            secrets_found=true
          fi

          # API keys (rudimentary heuristic)
          if grep -R --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" --exclude="*.md" -n -E "api[_-]?key\s*[:=]\s*[\"']?[A-Za-z0-9_\-]{16,}" . | grep -v "YOUR_API_KEY" ; then
            echo "❌ Found potential API keys"
            secrets_found=true
          fi

          # Database URLs
          if grep -R --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" --exclude="*.md" -n -E "DATABASE_URL|DB_PASSWORD" . ; then
            echo "❌ Found potential database credentials"
            secrets_found=true
          fi

          # Private keys
          if grep -R --exclude-dir=.git -n -E "BEGIN[[:space:]]+.*PRIVATE.*KEY" . ; then
            echo "❌ Found potential private keys"
            secrets_found=true
          fi

          if [ "$secrets_found" = false ]; then
            echo "✅ No hardcoded secrets found"
          else
            echo "⚠️ Potential secrets detected - review findings above"
          fi

      - name: Check file permissions
        run: |
          set -euo pipefail
          echo "Checking file permissions..."

          echo "Checking for unexpected executable files..."
          find . -type f -perm /111 -not -path "./.git/*" -not -name "*.sh" -not -name "*.py" | while read -r file; do
            echo "⚠️ Executable file found: $file"
          done

          echo "Checking for world-writable files..."
          find . -type f -perm -002 -not -path "./.git/*" | while read -r file; do
            echo "⚠️ World-writable file found: $file"
          done

          echo "✅ File permission check completed"

      - name: Analyze Liquid code security
        run: |
          set -euo pipefail
          echo "Analyzing Liquid code for security issues..."

          echo "Checking for unsafe Liquid filters..."
          unsafe_filters=("raw" "script_tag" "stylesheet_tag")
          for filter in "${unsafe_filters[@]}"; do
            if grep -R --include="*.liquid" -n "\| $filter" . ; then
              echo "⚠️ Found potentially unsafe filter: $filter"
            fi
          done

          echo "Checking user input handling..."
          if grep -R --include="*.liquid" -n "request\." . ; then
            echo "⚠️ Found direct request usage - ensure proper sanitization"
          fi
          if grep -R --include="*.liquid" -n "params\." . ; then
            echo "⚠️ Found direct params usage - ensure proper sanitization"
          fi

          echo "Checking for potential XSS in JavaScript..."
          if grep -R --include="*.js" -n -E "innerHTML|document\.write" . ; then
            echo "⚠️ Found potential XSS-prone patterns"
          fi

          echo "✅ Liquid security analysis completed"

      - name: Check for sensitive data exposure
        run: |
          set -euo pipefail
          echo "Checking for sensitive data exposure..."

          if grep -R --include="*.{liquid,js,css}" -n -E "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}" . | grep -v -E "example|placeholder|test" ; then
            echo "⚠️ Found potential email addresses in code"
          fi

          if grep -R --include="*.{liquid,js}" -n -E "\b[0-9]{3}-[0-9]{3}-[0-9]{4}\b" . ; then
            echo "⚠️ Found potential phone numbers in code"
          fi

          if grep -R --include="*.{liquid,js}" -n -E "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" . | grep -v -E "127\.0\.0\.1|0\.0\.0\.0" ; then
            echo "⚠️ Found potential IP addresses in code"
          fi

          echo "✅ Sensitive data exposure check completed"

      - name: Create security report
        run: |
          set -euo pipefail
          cat << 'EOF' > security-report.md
          # WTF Theme Security Audit Report

          **Date:** $(date)
          **Audit Scope:** Full theme security analysis

          ## Security Checks Performed

          ### NPM Dependencies
          $(if [ -f "package.json" ]; then echo "✅ NPM audit completed"; else echo "⏭️ No package.json found"; fi)

          ### Secret Scanning
          ✅ Hardcoded secrets scan completed

          ### File Permissions
          ✅ File permission analysis completed

          ### Liquid Code Security
          ✅ Liquid template security analysis completed

          ### Data Exposure Check
          ✅ Sensitive data exposure check completed

          ## Security Recommendations

          ### Immediate Actions
          1. **Remove any hardcoded secrets** - Use environment variables or Shopify settings
          2. **Sanitize user inputs** - Ensure all user-provided data is properly escaped
          3. **Review file permissions** - Remove unnecessary executable permissions
          4. **Update dependencies** - Keep all npm packages up to date

          ### Best Practices
          1. **Input Validation** - Validate inputs on client and server
          2. **Output Encoding** - Use appropriate Liquid filters for encoding
          3. **HTTPS Enforcement** - Ensure all communications use HTTPS
          4. **Content Security Policy** - Implement CSP headers where possible

          ## Compliance Notes
          - **PCI DSS:** Payment handled by Shopify’s secure checkout
          - **GDPR/CCPA:** Ensure proper handling of customer data & rights

          ## Next Review
          - **Scheduled:** Daily automated security scans
          - **Manual:** Quarterly comprehensive security review
          EOF

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: |
            security-report.md
            npm-audit-results.json
          retention-days: 90
          if-no-files-found: ignore

  dependency-monitoring:
    name: Dependency Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependency tools
        run: |
          set -euo pipefail
          npm install -g npm-check-updates depcheck
          sudo apt-get update && sudo apt-get install -y jq

      - name: Check for outdated & unused deps
        if: ${{ hashFiles('package.json') != '' }}
        run: |
          set -euo pipefail
          echo "Checking for outdated and unused dependencies..."
          ncu --format group > dependency-updates.txt
          depcheck --json > depcheck-results.json || true
          echo "✅ Dependency check completed"

      - name: Analyze dependency security
        if: ${{ hashFiles('package.json') != '' }}
        run: |
          set -euo pipefail
          echo "Analyzing dependency security..."
          npm audit --json > vulnerability-report.json || true

          if [ -f "vulnerability-report.json" ]; then
            HIGH_VULNS=$(jq '.metadata.vulnerabilities.high // 0' < vulnerability-report.json)
            MODERATE_VULNS=$(jq '.metadata.vulnerabilities.moderate // 0' < vulnerability-report.json)
            LOW_VULNS=$(jq '.metadata.vulnerabilities.low // 0' < vulnerability-report.json)

            echo "HIGH_VULNS=$HIGH_VULNS" >> $GITHUB_ENV
            echo "MODERATE_VULNS=$MODERATE_VULNS" >> $GITHUB_ENV
            echo "LOW_VULNS=$LOW_VULNS" >> $GITHUB_ENV

            echo "Vulnerability Summary:"
            echo "- High: $HIGH_VULNS"
            echo "- Moderate: $MODERATE_VULNS"
            echo "- Low: $LOW_VULNS"
          fi

      - name: Check Shopify CLI updates
        run: |
          set -euo pipefail
          echo "Checking Shopify CLI updates..."
          CURRENT_CLI_VERSION=$(npm list -g @shopify/cli --depth=0 2>/dev/null | grep @shopify/cli | awk -F@ '{print $3}' || echo "not installed")
          LATEST_CLI_VERSION=$(npm show @shopify/cli version 2>/dev/null || echo "unknown")

          echo "CURRENT_CLI_VERSION=$CURRENT_CLI_VERSION" >> $GITHUB_ENV
          echo "LATEST_CLI_VERSION=$LATEST_CLI_VERSION" >> $GITHUB_ENV

          echo "Shopify CLI versions:"
          echo "- Current: $CURRENT_CLI_VERSION"
          echo "- Latest: $LATEST_CLI_VERSION"
          if [ "$CURRENT_CLI_VERSION" != "$LATEST_CLI_VERSION" ] && [ "$CURRENT_CLI_VERSION" != "not installed" ]; then
            echo "⚠️ Shopify CLI update available"
          fi

      - name: Create dependency report
        run: |
          set -euo pipefail
          cat << 'EOF' > dependency-monitoring-report.md
          # WTF Theme Dependency Monitoring Report

          **Date:** $(date)
          **Monitoring Type:** $(if [ "${{ github.event_name }}" = "schedule" ]; then echo "Scheduled"; else echo "Triggered"; fi)

          ## Dependency Status

          ### NPM Dependencies
          $(if [ -f "package.json" ]; then echo "✅ package.json found and analyzed"; else echo "⏭️ No package.json found"; fi)

          ### Security Vulnerabilities
          $(if [ -f "vulnerability-report.json" ]; then
            echo "- High severity: ${HIGH_VULNS:-0}"
            echo "- Moderate severity: ${MODERATE_VULNS:-0}"
            echo "- Low severity: ${LOW_VULNS:-0}"
          else
            echo "⏭️ No vulnerability data available"
          fi)

          ### Shopify CLI
          - Current version: ${CURRENT_CLI_VERSION:-unknown}
          - Latest version: ${LATEST_CLI_VERSION:-unknown}
          $(if [ "${CURRENT_CLI_VERSION:-unknown}" != "${LATEST_CLI_VERSION:-unknown}" ] && [ "${CURRENT_CLI_VERSION:-unknown}" != "not installed" ]; then echo "- Status: ⚠️ Update available"; else echo "- Status: ✅ Up to date"; fi)

          ## Update Recommendations

          ### High Priority
          $(if [ "${HIGH_VULNS:-0}" -gt 0 ]; then echo "🚨 **URGENT:** $HIGH_VULNS high-severity vulnerabilities found - update immediately"; fi)
          $(if [ "${MODERATE_VULNS:-0}" -gt 0 ]; then echo "⚠️ $MODERATE_VULNS moderate-severity vulnerabilities found - update soon"; fi)

          ### Maintenance Updates
          $(if [ -f "dependency-updates.txt" ]; then echo "📋 Dependency updates available - see dependency-updates.txt"; fi)
          $(if [ "${CURRENT_CLI_VERSION:-unknown}" != "${LATEST_CLI_VERSION:-unknown}" ]; then echo "🔧 Shopify CLI update available"; fi)

          ## Action Items
          1. **Review vulnerability report** - Address high & moderate issues
          2. **Update dependencies** - Apply patches and minor updates
          3. **Test after updates** - Verify theme functionality
          4. **Update docs** - Note any breaking changes

          ## Automation Status
          - **Daily monitoring:** ✅ Active
          - **Security alerts:** ✅ Enabled
          - **Auto-updates:** ❌ Manual approval required
          EOF

      - name: Upload dependency monitoring results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-monitoring-results
          path: |
            dependency-monitoring-report.md
            dependency-updates.txt
            depcheck-results.json
            vulnerability-report.json
          retention-days: 30
          if-no-files-found: ignore

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check privacy compliance
        run: |
          set -euo pipefail
          echo "Checking privacy compliance..."
          if grep -R --include="*.liquid" -n -E "privacy.*policy|Privacy.*Policy" . ; then
            echo "✅ Privacy policy references found"
          else
            echo "⚠️ No privacy policy references found"
          fi
          if grep -R --include="*.{liquid,js}" -n -E "cookie.*consent|Cookie.*Consent" . ; then
            echo "✅ Cookie consent implementation found"
          else
            echo "⚠️ No cookie consent implementation found"
          fi
          if grep -R --include="*.liquid" -n -E "gdpr|GDPR|data.*protection" . ; then
            echo "✅ GDPR references found"
          else
            echo "⚠️ No GDPR references found"
          fi

      - name: Check accessibility compliance
        run: |
          set -euo pipefail
          echo "Checking accessibility compliance..."
          ARIA_COUNT=$(grep -R --include="*.liquid" -n "aria-" . | wc -l || true)
          IMG_COUNT=$(grep -R --include="*.liquid" -n "<img" . | wc -l || true)
          ALT_COUNT=$(grep -R --include="*.liquid" -n -E "<img[^>]*alt=" . | wc -l || true)
          INPUT_COUNT=$(grep -R --include="*.liquid" -n "<input" . | wc -l || true)
          LABEL_COUNT=$(grep -R --include="*.liquid" -n -E "<label|aria-label" . | wc -l || true)
          H1_COUNT=$(grep -R --include="*.liquid" -n "<h1" . | wc -l || true)
          echo "ARIA attributes found: $ARIA_COUNT"
          echo "Images: $IMG_COUNT, Images with alt: $ALT_COUNT"
          echo "Inputs: $INPUT_COUNT, Labels/ARIA labels: $LABEL_COUNT"
          echo "H1 headings found: $H1_COUNT"

      - name: Check security compliance
        run: |
          set -euo pipefail
          echo "Checking security compliance..."
          if grep -R --include="*.{liquid,js}" -n "https://" . ; then
            echo "✅ HTTPS usage found"
          fi
          if grep -R --include="*.liquid" -n -E "method.*post|method=\"post\"" . ; then
            echo "✅ POST forms found"
          fi
          if grep -R --include="*.{liquid,js}" -n -E "required|validate" . ; then
            echo "✅ Input validation found"
          fi

      - name: Create compliance report
        run: |
          set -euo pipefail
          cat << 'EOF' > compliance-report.md
          # WTF Theme Compliance Report

          **Date:** $(date)
          **Compliance Framework:** WCAG 2.1 AA, GDPR, PCI DSS

          ## Privacy Compliance
          - Privacy policy references: $(if grep -R --include="*.liquid" -q -E "privacy.*policy|Privacy.*Policy" . ; then echo "✅ Found"; else echo "❌ Missing"; fi)
          - Cookie consent: $(if grep -R --include="*.{liquid,js}" -q -E "cookie.*consent|Cookie.*Consent" . ; then echo "✅ Found"; else echo "❌ Missing"; fi)
          - Data protection references: $(if grep -R --include="*.liquid" -q -E "gdpr|GDPR|data.*protection" . ; then echo "✅ Found"; else echo "❌ Missing"; fi)

          ## Accessibility (WCAG 2.1 AA)
          - ARIA attributes: $(grep -R --include="*.liquid" -n "aria-" . | wc -l)
          - Images with alt text: $(grep -R --include="*.liquid" -n -E "<img[^>]*alt=" . | wc -l)/$(grep -R --include="*.liquid" -n "<img" . | wc -l)
          - Form labels: $(grep -R --include="*.liquid" -n -E "<label|aria-label" . | wc -l)
          - H1 headings: $(grep -R --include="*.liquid" -n "<h1" . | wc -l)

          ## Security (PCI considerations)
          - HTTPS usage: $(if grep -R --include="*.{liquid,js}" -q "https://" . ; then echo "✅ Present"; else echo "⚠️ Review needed"; fi)
          - Secure forms (POST): $(if grep -R --include="*.liquid" -q -E "method.*post|method=\"post\"" . ; then echo "✅ Present"; else echo "⚠️ Review needed"; fi)

          ## Recommendations
          1. Ensure all images have descriptive alt attributes
          2. Add proper form labels and ARIA attributes
          3. Implement/verify cookie consent banner
          4. Validate & sanitize inputs; use proper output encoding
          5. Consider CSP and additional headers

          ## Automation
          - Daily monitoring: ✅ Active
          - Security alerts: ✅ Enabled
          - Auto-updates: ❌ Manual approval required
          EOF

      - name: Upload compliance results
        uses: actions/upload-artifact@v4
        with:
          name: compliance-check-results
          path: compliance-report.md
          retention-days: 90
          if-no-files-found: ignore

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs:
      - security-audit
      - dependency-monitoring
      - compliance-check
      - dependency-review
      - secrets-scan
    if: always()
    steps:
      - name: Create security summary
        run: |
          set -euo pipefail
          cat << EOF > security-summary.md
          # WTF Theme Security & Compliance Summary

          **Date:** $(date)
          **Run:** ${{ github.run_number }}

          ## Status by Job
          - Dependency Review: ${{ needs.dependency-review.result }}
          - Secrets Scan: ${{ needs.secrets-scan.result }}
          - Security Audit: ${{ needs.security-audit.result }}
          - Dependency Monitoring: ${{ needs.dependency-monitoring.result }}
          - Compliance Check: ${{ needs.compliance-check.result }}

          ## Overall Posture
          $(if [ "${{ needs.security-audit.result }}" = "success" ] && [ "${{ needs.dependency-monitoring.result }}" = "success" ] && [ "${{ needs.compliance-check.result }}" = "success" ]; then echo "🟢 **SECURE** - Core checks passed"; elif [ "${{ needs.security-audit.result }}" = "failure" ] || [ "${{ needs.dependency-monitoring.result }}" = "failure" ]; then echo "🔴 **ATTENTION REQUIRED** - Critical issues detected"; else echo "🟡 **REVIEW NEEDED** - Some items need attention"; fi)

          ## Immediate Actions
          $(if [ "${{ needs.secrets-scan.result }}" = "failure" ]; then echo "- 🚨 Investigate leaked secrets (Gitleaks)"; fi)
          $(if [ "${{ needs.dependency-review.result }}" = "failure" ]; then echo "- 🚨 Fix vulnerable dependencies flagged in PR"; fi)

          ## Cadence
          - Daily: Automated security & dependency scans
          - Weekly: Review reports & apply updates
          - Monthly: Compliance review & documentation
          - Quarterly: Full security assessment
          EOF

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary-report
          path: security-summary.md
          retention-days: 90
          if-no-files-found: ignore
